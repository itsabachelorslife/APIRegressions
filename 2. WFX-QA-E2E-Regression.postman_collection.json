{
	"info": {
		"_postman_id": "f6375896-aa01-4ad4-aae4-eab211b39756",
		"name": "2. WFX-QA-E2E-Regression",
		"description": "*   Authentications\n    *   SA, Admin, User\n    *   SSO user accounts\n*   Organization Search, Update\n*   User tests\n    *   New User, make admin, update details, login & reset password\n    *   Set user permissions, preferences, document settings\n    *   Create user tests\n*   Roles & Places\n*   UserLists\n*   Attributes\n*   User Roles\n*   Workflows\n*   Hashtags\n*   Broadcasts\n*   Fokoud checks\n*   Create basic task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8443841"
	},
	"item": [
		{
			"name": "Authentications",
			"item": [
				{
					"name": "SuperAdmin Auth",
					"item": [
						{
							"name": "installations SuperAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIdSuperAdmin\", jsonData.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod SuperAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenSuperAdmin\", loginToken);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "installation-id",
										"type": "text",
										"value": "{{clientIdSuperAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"{{SuperAdmin}}\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate SuperAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenSuperAdmin\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUserSuperAdmin\", response.userId);",
											"",
											"const Authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"AuthorizationSuperAdmin\", Authorization);",
											"",
											"pm.environment.set(\"wssworkforceudUserId\", response.workforceudUserId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"type": "text",
										"value": "{{loginTokenSuperAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "installation-id",
										"type": "text",
										"value": "{{clientIdSuperAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{SuperAdmin}}\",\n\t\"password\": \"Password1!\",\n    \"organizationUniqueName\": \"workforce\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "check Organization Unique Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserSuperAdmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenSuperAdmin}}",
										"type": "text"
									},
									{
										"key": "loginToken",
										"value": "{{loginTokenQAadmin}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "installation-id",
										"value": "{{clientIdSuperAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/organizations/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"organizations",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "check Organization Unique Name Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ORGANIZATION_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserSuperAdmin}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "access-token",
										"value": "{{accessTokenSuperAdmin}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "loginToken",
										"value": "{{loginTokenQAadmin}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "installation-id",
										"value": "{{clientIdSuperAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"organizationUniqueName\": \"workforce-nomore-666\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/organizations/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"organizations",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIdadmin\", jsonData.id);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenadmin\", loginToken);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"qaadmin@workforcesoftware.com\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenadmin\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseradmin\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"Authorizationadmin\", authorization)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenadmin}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qaadmin@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\",\n    \"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "check Organization Unique Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/organizations/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"organizations",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser\", jsonData.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser\", loginToken);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qauser@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"Authorizationuser\", authorization)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qauser@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\",\n    \"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "check Organization Unique Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/organizations/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"organizations",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Non Migrated SAML SSO Test Google",
					"item": [
						{
							"name": "search Community",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ssoConfig\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"enabled\\\"\\:true\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Legacy Foko Co\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{AuthorizationSuperAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"findCommunities\",\n        \"filter\": {\n            \"name\": {\n                \"$regex\": \"foko\",\n                \"$options\": \"i\"\n            }\n        },\n        \"sort\": \"touchedAt\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/v17/communities/superAction",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"v17",
										"communities",
										"superAction"
									]
								}
							},
							"response": []
						},
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"nonmigratedclientIdadmin\", jsonData.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"appId\": \"co.foko.staging\",\n    \"appVersion\": \"4.5.1\",\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36\",\n    \"deviceType\": \"web\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/v17/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"v17",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"nonmigratedloginTokenadmin\", loginToken);",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"SSOURL\", jsonData.error.details.ssoUrl);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Community Legacy Foko Co is SSO enabled\");",
											"    pm.expect(pm.response.text()).to.include(\"SSO_REQUIRED\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.foko-services.com/sso/61f05a5cb82b8000126add5f/login\");",
											"    pm.expect(pm.response.text()).to.include(\"6239e0f5bcde1438e8b67349\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "installation-id",
										"type": "text",
										"value": "{{nonmigratedclientIdadmin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"ssotest@fokoretail.com\",\n    \"installationId\": \"{{nonmigratedclientIdadmin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/v17/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"v17",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Google Staging",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"google-site-verification\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.foko-services.com/sso/61f05a5cb82b8000126add5f/login",
									"protocol": "https",
									"host": [
										"staging",
										"foko-services",
										"com"
									],
									"path": [
										"sso",
										"61f05a5cb82b8000126add5f",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Google WFX Staging",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"google-site-verification\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SSOURL}}",
									"host": [
										"{{SSOURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SSO Workforce",
					"item": [
						{
							"name": "GET Resolver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"WorkForce\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"baseURL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.foko.io/resolver/organizations/:SSOorgId",
									"protocol": "https",
									"host": [
										"api",
										"foko",
										"io"
									],
									"path": [
										"resolver",
										"organizations",
										":SSOorgId"
									],
									"variable": [
										{
											"key": "SSOorgId",
											"value": "workforce"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"WFXclientIdadmin\", jsonData.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"appId\": \"com.workforcesoftware.wfx\",\n    \"appVersion\": \"4.5.1\",\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36\",\n    \"deviceType\": \"web\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.foko.io/api/v17/installations",
									"protocol": "https",
									"host": [
										"api",
										"foko",
										"io"
									],
									"path": [
										"api",
										"v17",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenadminWFX\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{WFXclientIdadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"jdowler@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.foko.io/v1/login/authmethod",
									"protocol": "https",
									"host": [
										"api",
										"foko",
										"io"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "SSO Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ssoLoginUrl\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{WFXclientIdadmin}}",
										"type": "text"
									},
									{
										"key": "login-token",
										"value": "{{loginTokenadminWFX}}",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "https://api.foko.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"jdowler@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.foko.io/v1/sso/login",
									"protocol": "https",
									"host": [
										"api",
										"foko",
										"io"
									],
									"path": [
										"v1",
										"sso",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SSO QATEST",
					"item": [
						{
							"name": "GET Resolver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.foko-services.com/resolver/organizations/:SSOorgId",
									"protocol": "https",
									"host": [
										"staging",
										"foko-services",
										"com"
									],
									"path": [
										"resolver",
										"organizations",
										":SSOorgId"
									],
									"variable": [
										{
											"key": "SSOorgId",
											"value": "qassotest"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"SSOclientIdadmin\", jsonData.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"appId\": \"com.workforcesoftware.wfx.staging\",\n    \"appVersion\": \"4.5.1\",\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36\",\n    \"deviceType\": \"web\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/v17/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"v17",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenadminSSO\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{SSOclientIdadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"ssouser@qassotest.com\",\n    \"organizationUniqueName\": \"qassotest\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "SSO Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ssoLoginUrl\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://dev-rzfq3s85.us.auth0.com\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{SSOclientIdadmin}}",
										"type": "text"
									},
									{
										"key": "login-token",
										"value": "{{loginTokenadminSSO}}",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "staging.foko-services.com",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Origin",
										"value": "https://staging.foko-services.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"ssouser@qassotest.com\",\n    \"organizationUniqueName\": \"qassotest\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/sso/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"sso",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Privilege SA",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUsersa}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokensa}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"broadcaster\": true,\n  \"broadcastGatekeeper\": false,\n  \"taskCreator\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"privileges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUsersa}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Privilege Admin",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUsersa}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokensa}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"broadcaster\": true,\n  \"broadcastGatekeeper\": false,\n  \"taskCreator\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"privileges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUsersa}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization",
			"item": [
				{
					"name": "Search Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaOrg\", jsonData.organizations[0].id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workforceudOrgName\", jsonData.organizations[0].uniqueName);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 0,\n    \"offset\": 0,\n    \"partialName\": \"WFX-QA-Regression\",\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Organizations error check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"limit\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"partialName\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": \"k\",\n    \"offset\": 0,\n    \"partialName\": 6,\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Second Delay",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"WFX-QA-Regression\",\n    \"uniqueName\": \"WFX-QA-Regression\",\n        \"status\": \"DEMO\",\n    \"realms\": [\n        \"QArealm\"\n    ],\n    \"appId\": \"{{appId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Second Delay",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable Broadcast Feature",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"broadcast\": true,\n    \"dashboard\": true,\n    \"folderStorage\": true,\n    \"broadcastGatekeeper\": true,\n    \"outgoingNotifications\": true,\n    \"newTask\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/features",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"features"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Community Search workforceud Sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"uniqueName\");",
									"});",
									"",
									"",
									"//Get the variable value",
									"var testVar= pm.environment.get(\"qaOrg\");",
									"",
									"//Validate whether entire response value as a text contains the variable value. ",
									"pm.test(\"Validate if response contains variable.\", function () {",
									"     pm.expect(pm.response.text()).to.include(testVar);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workforceudQAOrgId\", jsonData.data[0]._id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"rootFolderId\", jsonData.data[0].rootFolderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"findCommunities\",\n        \"filter\": {\n            \"name\": {\n                \"$regex\": \"{{workforceudOrgName}}\",\n                \"$options\": \"i\"\n            },\n            \"type\": \"corporate\"\n        },\n        \"sort\": \"touchedAt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/superAction",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								"superAction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Community Search WFX-QA-R",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"uniqueName\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workforceIdH\", jsonData.data[0]._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"findCommunities\",\n        \"filter\": {\n            \"name\": {\n                \"$regex\": \"WFX-QA-R\",\n                \"$options\": \"i\"\n            },\n            \"type\": \"corporate\"\n        },\n        \"sort\": \"touchedAt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/superAction",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								"superAction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Organizations WFX-QA-Regression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"[workforceId]\", jsonData.organizations[0].id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 0,\n    \"offset\": 0,\n    \"partialName\": \"{{workforceudOrgName}}\",\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Global Resolver Sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/sync-resolver-data",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"sync-resolver-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get global resolver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"WFX-QA-Regression\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/resolver/organizations/:orgname",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"resolver",
								"organizations",
								":orgname"
							],
							"variable": [
								{
									"key": "orgname",
									"value": "WFX-QA-Regression"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Org Features",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:orgId/features",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":orgId",
								"features"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Org Features Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationsa}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newTask\": true,\n    \"newTaskAdvanced\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:orgId/features",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":orgId",
								"features"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create Org Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaAdmine2e\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaAdmine2eId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"WFXAdmin+{{$timestamp}}@workforcesoftware.com\",\n  \"firstName\": \"WFX\",\n  \"lastName\": \"Admin\",\n  \"email\": \"WFXAdmin+{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Second Delay",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Org Admin User Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"qaJason\",\n    \"lastName\": \"qaDowler\",\n    \"username\": \"{{qaAdmine2e}}\",\n    \"bio\": \"Bio for user updated {{$isoTimestamp}}\",\n    \"avatarId\": \"5f5117881189e56d518aa1bf\",\n    \"phoneNumber\": \"+16137965272\",\n    \"preferences\": {\n        \"language\": \"en-us\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaAdmine2eId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Second Delay",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User WFX Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"searchValue\": \"{{qaAdmine2e}}\",\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"includeAvatars\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaAdmine2eId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"languages\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/users/languages",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "installations Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIdadmin\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenQAadmin\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/organizations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenQAadmin\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaAdmine2e}}\",\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "ChangePassword Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"newPassword\": \"Password1!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/change-password",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"change-password"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaAdmine2eId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//const response = pm.response.json(); // Parse the response",
									"",
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenQAadmin\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUserQAadmin\", response.userId);",
									"",
									"const Authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"AuthorizationQA\", Authorization);",
									"pm.environment.set(\"workforceudAuthorizationadmin\", Authorization);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenQAadmin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{qaAdmine2e}}\",\n\t\"password\": \"Password1!\",\n      \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set User Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"language\": \"th-th\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/preferences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"preferences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaAdmine2eId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Language QA Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"languages\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/users/languages",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "User search workforceud Sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"servicesId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/users/search?limit=10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "jdowler",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "filter[q]",
									"value": "{{qaAdmine2e}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check Organization Unique Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							},
							{
								"key": "loginToken",
								"value": "{{loginTokenQAadmin}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadmin}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/organizations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Privileges workforceUD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcastGatekeeperEnabled\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"broadcaster\": false,\n    \"broadcastGatekeeperEnabled\": false,\n    \"outgoingNotificationsEnabled\": true,\n    \"taskCreator\": true,\n    \"createHashtag\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Privileges workforceUD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcastGatekeeperEnabled\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings/system",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings",
								"system"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add AuthMethod SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"idpCertificate\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"authType\", response.type);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"authMethod\": \"SSO\",\n\n\"details\": {\n\n    \"ssoType\": \"SAML2\",\n    \"loginUrl\": \"https://accounts.google.com/o/saml2/idp?idpid=C022chvuf\",\n    \"idpCertificate\": \"MIIDdDCCAlygAwIBAgIGAVTyngH0MA0GCSqGSIb3DQEBCwUAMHsxFDASBgNVBAoTC0dvb2dsZSBJbmMuMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MQ8wDQYDVQQDEwZHb29nbGUxGDAWBgNVBAsTD0dvb2dsZSBGb3IgV29yazELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWEwHhcNMTYwNTI3MTQyODQxWhcNMjEwNTI2MTQyODQxWjB7MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEPMA0GA1UEAxMGR29vZ2xlMRgwFgYDVQQLEw9Hb29nbGUgRm9yIFdvcmsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzvqcUQSiNINLqqk5g8fJp71PGVzCqAcL+2DADGKgzKazxdUGBQ1f0vM5eeSGMl4Kch7MqWKr+c+wm/D5W54VN+XyYVEYILBUlo3PN5vNfA0fkuqntFVGN4lqqJbrQX0O/BMNu8XKB0eohvqjAsVLnM/pSrXkFrwWPhuJrgX9yiiOAc1k6/oh795gJRHdfV9tsz43sV/JnEGD2mm5Bchkm8o0N31jVOOSVcXo3v+XKklNZ+9woABI3Btbi399ARVFHG3P0rDeCTNC3LBGj+b8KGosdjW5CYPbrsBpLEWD1d7ul+1F0JGR+zNZRmxXOxBAR4Y8ITIbkVQYsrmmUEgljQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQANEcmC4G1mnlfMNhBsEeKxcbFB6gygK45WDziTt/omST6EFR77N10mhBCQ1SG51RqnKHA4iZ4Msw5M74BDFahsQ/mwknQA10KB702V0It5s+w97AcpKB9zJqP+EmWlLloKDcz1b4202mSEr4PKWMyCX+6K2dfYnNzJWI1vdOds81Op9SQKxfoEn5StHgMRYVCdEM15OYITlE5HEEVlTVyda1P13k/Ggj4hGvlt5GHR9a8g+fOhD4pj9oMNz3HEJ6/sSdL0i1zuNQ5/atu7D8pOumxbHl+e77hKJkMtwPP1Zfxty0uVchBub744Fyv8j2tzk3iXlrocEYRrb8KPRvr1\",\n    \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"authmethod"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update AuthMethod SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"idpCertificate\");",
									"//});",
									"",
									"//const response = pm.response.json();",
									"//pm.environment.set(\"authType\", response.type);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"loginUrl\": \"https://accounts.google.com/o/saml2/idp?idpid=C022chvuf\",\n    \"idpCertificate\": \"MIIDdDCCAlygAwIBAgIGAVTyngH0MA0GCSqGSIb3DQEBCwUAMHsxFDASBgNVBAoTC0dvb2dsZSBJbmMuMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MQ8wDQYDVQQDEwZHb29nbGUxGDAWBgNVBAsTD0dvb2dsZSBGb3IgV29yazELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWEwHhcNMTYwNTI3MTQyODQxWhcNMjEwNTI2MTQyODQxWjB7MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEPMA0GA1UEAxMGR29vZ2xlMRgwFgYDVQQLEw9Hb29nbGUgRm9yIFdvcmsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzvqcUQSiNINLqqk5g8fJp71PGVzCqAcL+2DADGKgzKazxdUGBQ1f0vM5eeSGMl4Kch7MqWKr+c+wm/D5W54VN+XyYVEYILBUlo3PN5vNfA0fkuqntFVGN4lqqJbrQX0O/BMNu8XKB0eohvqjAsVLnM/pSrXkFrwWPhuJrgX9yiiOAc1k6/oh795gJRHdfV9tsz43sV/JnEGD2mm5Bchkm8o0N31jVOOSVcXo3v+XKklNZ+9woABI3Btbi399ARVFHG3P0rDeCTNC3LBGj+b8KGosdjW5CYPbrsBpLEWD1d7ul+1F0JGR+zNZRmxXOxBAR4Y8ITIbkVQYsrmmUEgljQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQANEcmC4G1mnlfMNhBsEeKxcbFB6gygK45WDziTt/omST6EFR77N10mhBCQ1SG51RqnKHA4iZ4Msw5M74BDFahsQ/mwknQA10KB702V0It5s+w97AcpKB9zJqP+EmWlLloKDcz1b4202mSEr4PKWMyCX+6K2dfYnNzJWI1vdOds81Op9SQKxfoEn5StHgMRYVCdEM15OYITlE5HEEVlTVyda1P13k/Ggj4hGvlt5GHR9a8g+fOhD4pj9oMNz3HEJ6/sSdL0i1zuNQ5/atu7D8pOumxbHl+e77hKJkMtwPP1Zfxty0uVchBub744Fyv8j2tzk3iXlrocEYRrb8KPRvr1\",\n    \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/authmethod/sso/:ssoType",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"authmethod",
								"sso",
								":ssoType"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "ssoType",
									"value": "SAML2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove AuthMethod SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ssoType\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/authmethod/:authType",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"authmethod",
								":authType"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "authType",
									"value": "{{authType}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET AuthMethod SAML2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"idpCertificate\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/authmethod/sso/SAML2",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"authmethod",
								"sso",
								"SAML2"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add AuthMethod SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"idpCertificate\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"authMethod\": \"SSO\",\n\n\"details\": {\n\n    \"ssoType\": \"SAML2\",\n    \"loginUrl\": \"https://accounts.google.com/o/saml2/idp?idpid=C022chvuf\",\n    \"idpCertificate\": \"MIIDdDCCAlygAwIBAgIGAVTyngH0MA0GCSqGSIb3DQEBCwUAMHsxFDASBgNVBAoTC0dvb2dsZSBJbmMuMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MQ8wDQYDVQQDEwZHb29nbGUxGDAWBgNVBAsTD0dvb2dsZSBGb3IgV29yazELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWEwHhcNMTYwNTI3MTQyODQxWhcNMjEwNTI2MTQyODQxWjB7MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEPMA0GA1UEAxMGR29vZ2xlMRgwFgYDVQQLEw9Hb29nbGUgRm9yIFdvcmsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzvqcUQSiNINLqqk5g8fJp71PGVzCqAcL+2DADGKgzKazxdUGBQ1f0vM5eeSGMl4Kch7MqWKr+c+wm/D5W54VN+XyYVEYILBUlo3PN5vNfA0fkuqntFVGN4lqqJbrQX0O/BMNu8XKB0eohvqjAsVLnM/pSrXkFrwWPhuJrgX9yiiOAc1k6/oh795gJRHdfV9tsz43sV/JnEGD2mm5Bchkm8o0N31jVOOSVcXo3v+XKklNZ+9woABI3Btbi399ARVFHG3P0rDeCTNC3LBGj+b8KGosdjW5CYPbrsBpLEWD1d7ul+1F0JGR+zNZRmxXOxBAR4Y8ITIbkVQYsrmmUEgljQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQANEcmC4G1mnlfMNhBsEeKxcbFB6gygK45WDziTt/omST6EFR77N10mhBCQ1SG51RqnKHA4iZ4Msw5M74BDFahsQ/mwknQA10KB702V0It5s+w97AcpKB9zJqP+EmWlLloKDcz1b4202mSEr4PKWMyCX+6K2dfYnNzJWI1vdOds81Op9SQKxfoEn5StHgMRYVCdEM15OYITlE5HEEVlTVyda1P13k/Ggj4hGvlt5GHR9a8g+fOhD4pj9oMNz3HEJ6/sSdL0i1zuNQ5/atu7D8pOumxbHl+e77hKJkMtwPP1Zfxty0uVchBub744Fyv8j2tzk3iXlrocEYRrb8KPRvr1\",\n    \"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"authmethod"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"idpCertificate\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/authmethod/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"authmethod",
								""
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Document Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"myDocs\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}",
								"disabled": true
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"myDocs\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Document Settings 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"myDocs\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}",
								"disabled": true
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"myDocsRevision\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Document Settings 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"myDocs\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}",
								"disabled": true
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"myDocsShare\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUser\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUserId\", jsonData.id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"WFXUser1+{{$timestamp}}@workforcesoftware\",\n  \"firstName\": \"WFXUser1\",\n  \"lastName\": \"WFXUser1\",\n  \"email\": \"jdowler+{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set isAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"isAdmin\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"admin"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUser2\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUserId2\", jsonData.id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"firstName\": \"qau2Jason\",\n  \"lastName\": \"qau2Dowler\",\n  \"email\": \"jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUser3\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUserId3\", jsonData.id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"firstName\": \"qau3Jason\",\n  \"lastName\": \"qau3Dowler\",\n  \"email\": \"jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org User 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUser4\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUserId4\", jsonData.id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"JDOWLER+QA{{$timestamp}}@workforcesoftware.com\",\n  \"firstName\": \"qau4Jason\",\n  \"lastName\": \"qau4Dowler\",\n  \"email\": \"JDOWLER+QA{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org User 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUser5\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUserId5\", jsonData.id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"Jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"firstName\": \"qau5Jason\",\n  \"lastName\": \"qauDowler\",\n  \"email\": \"Jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Second Delay",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Org User 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUser5\", jsonData.username);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"qaUserId5\", jsonData.id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"qau5Jason ☠️\",\n  \"lastName\": \"qauDowler ☠️\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User  Create non .com UN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"Jdowler+QA{{$timestamp}}@workforcesoftware\",\n  \"firstName\": \"qau5Jason\",\n  \"lastName\": \"qauDowler\",\n  \"email\": \"Jdowler+QA{{$timestamp}}@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User  Create same email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jdowler+{{$timestamp}}@workforcesoftware.com\",\n  \"firstName\": \"qauJason2\",\n  \"lastName\": \"qauDowler2\",\n  \"email\": \"jdowler@workforcesoftware.com\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User  Create invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"    pm.expect(pm.response.text()).to.include(\"email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jdowler@workforcesoftware\",\n  \"firstName\": \"qauJason2\",\n  \"lastName\": \"qauDowler2\",\n  \"email\": \"jdowler@workforcesoftware\",\n  \"isAdmin\": false,\n  \"sendAccountSetupEmail\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "installations User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenUser\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SSO\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SIMPLE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{clientIduser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "ChangePassword User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"newPassword\": \"Password1!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/change-password",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"change-password"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenUseradmin\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseradmin\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationadmin\", authorization)",
									"",
									"const Authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"Authorization\", Authorization);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenUser}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{qaUser}}\",\n\t\"password\": \"Password1!\",\n      \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"languages\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/users/languages",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "installations User3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser3\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod User3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenUser3\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{clientIduser3}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser3}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "ChangePassword User3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"newPassword\": \"Password1!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/change-password",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"change-password"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate User3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenUser3\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUser3\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorization3\", authorization)",
									"",
									"const Authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"Authorization3\", Authorization);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenUser3}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser3}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser3}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\",\n    \"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "installations User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser4\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenUser4\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{clientIduser4}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser4}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "ChangePassword User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"newPassword\": \"Password1!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/change-password",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"change-password"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenUser4\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUser4\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorization4\", authorization)",
									"",
									"const Authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"Authorization4\", Authorization);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenUser4}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser4}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser4}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\",\n    \"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Language Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"languages\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUser4}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenUser4}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/users/languages",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Prefs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language\": \"en-us\",\n    \"notification\": {\n        \"assigned_tasks\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        },\n        \"assigned_tasks_edit\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        },\n        \"assigned_tasks_removal\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        },\n        \"created_tasks_completion\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/preferences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"preferences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUserQAadmin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User prefs updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language\");",
									"",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"push\\\":true\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"email\\\":true\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaAdmine2eId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Prefs user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUser4}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenUser4}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language\": \"en-us\",\n    \"notification\": {\n        \"assigned_tasks\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        },\n        \"assigned_tasks_edit\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        },\n        \"assigned_tasks_removal\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        },\n        \"created_tasks_completion\": {\n            \"push\": true,\n            \"desktop\": true,\n            \"email\": true\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/preferences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"preferences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUser4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User prefs user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language\");",
									"",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"push\\\":true\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"email\\\":true\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUser4}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenUser4}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUser4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"userTask0\", jsonData.users[0].username);",
									"postman.setEnvironmentVariable(\"userTask1\", jsonData.users[1].username);",
									"postman.setEnvironmentVariable(\"userTask2\", jsonData.users[2].username);",
									"postman.setEnvironmentVariable(\"userTask3\", jsonData.users[3].username);",
									"postman.setEnvironmentVariable(\"userTask4\", jsonData.users[4].username);",
									"postman.setEnvironmentVariable(\"userTask5\", jsonData.users[5].username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"searchValue\": \"\",\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"includeAvatars\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Privilege Admin Copy",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"broadcaster\": false,\n  \"broadcastGatekeeper\": false,\n  \"taskCreator\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"privileges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUserQAadmin}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization UniqueName Auth",
			"item": [
				{
					"name": "installations Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIdadminAA\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenQAadminAA\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SSO\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SIMPLE\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadminAA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaAdmine2e}}\",\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod Error No Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"AUTHENTICATION_ERROR\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadminAA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaAdmine2e}}\",\n   \"organizationUniqueName\": \"GoGoPlata-Org-666\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenQAadminAA}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdadminAA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{qaAdmine2e}}\",\n\t\"password\": \"Password1!\",\n      \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles & Places",
			"item": [
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"roleId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"WFX QA Role {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create PlaceType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"placeTypeId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"WFX QA PlaceType {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/place-types",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"place-types"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"placeId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeTypeId\": \"{{placeTypeId}}\",\n    \"name\": \"WFX QA Place {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeIds\": [\n    \"{{placeId}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"placeIdBD0\", jsonData.places[0].id);",
									"postman.setEnvironmentVariable(\"placeIdBD1\", jsonData.places[1].id);",
									"postman.setEnvironmentVariable(\"placeIdBD2\", jsonData.places[2].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"userCount\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places error check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"userCount\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places error check Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"userCount\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Delete Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"PLACE_LINKED_TO_WORKFLOW\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"PLACE_LINKED_TO_ACTIVE_BROADCAST\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeIds\": [\n    \"{{placeIdBD0}}\",\n    \"{{placeIdBD1}}\",\n    \"{{placeIdBD2}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete PlaceType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeTypeIds\": [\n    \"{{placeTypeId}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/place-types/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"place-types",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create PlaceType Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"placeTypeId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"WFX QA PlaceType {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/place-types",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"place-types"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Place Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"placeId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeTypeId\": \"{{placeTypeId}}\",\n    \"name\": \"WFX QA Place {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Place with Parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"placeId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeTypeId\": \"{{placeTypeId}}\",\n    \"parentPlaceId\":\"{{placeId}}\",\n    \"name\": \"WFX QA Place with Parent 3 {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places with Parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"limit\" : 0,\n   \"offset\" : 0,\n   \"searchValue\" : \"WFX QA Place with Parent 3\",\n   \"includeTotal\" : true,\n   \"sortBy\" : {\n      \"propertyName\" : \"name\",\n      \"order\" : \"ASC\"\n   },\n   \"withoutParentOnly\" : false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Place with Parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"placeId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeTypeId\": \"{{placeTypeId}}\",\n    \"parentPlaceId\": null,\n    \"name\": \"WFX QA Place with Parent UPDATED 2 {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "placeId",
									"value": "{{placeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places without Parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"limit\" : 0,\n   \"offset\" : 0,\n   \"searchValue\" : \"updated\",\n   \"includeTotal\" : true,\n   \"sortBy\" : {\n      \"propertyName\" : \"name\",\n      \"order\" : \"ASC\"\n   },\n   \"withoutParentOnly\" : false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserList",
			"item": [
				{
					"name": "Create Empty User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListIdEmpty\", jsonData.userListId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QA UserList Empty {{$timestamp}} {{$randomInt}} {{$randomBsAdjective}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Empty User List ERROR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID\\_REQUEST\\_DATA\\\"\\:\\[\\\"name\\\"\");",
									"});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userListId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QAUserList1 1  {{$timestamp}} {{$randomBsBuzz}}\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"fromUserLists\": [],\n        \"privileges\": {\n        \"broadcaster\": true,\n        \"broadcastGatekeeper\": true,\n        \"taskCreator\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListId2\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userList\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QAUserList1 1 {{$timestamp}} {{$randomBsBuzz}}\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"privileges\": {\n        \"broadcaster\": true,\n        \"broadcastGatekeeper\": true,\n        \"taskCreator\": true\n    },\n    \"fromUserLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListId3\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userList\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QAUserList1 1 {{$timestamp}} {{$randomBsBuzz}}\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"fromUserLists\": [\"{{UserListId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userListId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QAUserList1 1 {{$timestamp}} {{$randomBsBuzz}}\",\n    \"userIds\": [],\n    \"fromUserLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List everyone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USERLIST_NAME_IS_RESERVED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"everyone\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"fromUserLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List EVERYONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USERLIST_NAME_IS_RESERVED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"EVERYONE\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"fromUserLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USERLIST_NAME_IS_RESERVED\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"admin\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"fromUserLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USERLIST_NAME_IS_RESERVED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"admin\",\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ],\n    \"fromUserLists\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List Just UserList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userListId\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QAUserList1 1 just userlist {{$timestamp}} {{$randomBsAdjective}}\",\n    \"userIds\": [],\n    \"fromUserLists\": [\n        \"373e50b7-f6b0-4865-8ba5-00e5950ecc47\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List Just UserList Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userListId\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"name\": \"QAUserList1 1 just userlist {{$timestamp}} {{$randomBsAdjective}}\",\n    \"userIds\": [],\n    \"fromUserLists\": [\n        \"373e50b7-f6b0-4865-8ba5-00e5950ecc47\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List UTF8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListId2\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userListId\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QA เจสันอยู่ที่นี่ {{$timestamp}}\",\n        \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User List 2 Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListIdDelete\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userListId\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QA 2BDeleted {{$timestamp}}\",\n        \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete UserList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userListIds\": [\n    \"{{UserListIdDelete}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User List Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"QA UserList 1 updated ☠️ {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Users to User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"USERS_DUPLICATED_IN_USER_LIST\");",
									"//});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\",\n        \"{{qaUserId5}}\",\n        \"{{qaUserId4}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId/add-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId",
								"add-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add UserList to UserList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"USERS_DUPLICATED_IN_USER_LIST\");",
									"//});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userIds\": [],\n    \"fromUserLists\": [\n        \"{{UserListId}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId/add-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId",
								"add-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListIdEmpty}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add users Duplicated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USERS_DUPLICATED_IN_USER_LIST\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\",\n        \"{{qaUserId5}}\",\n        \"{{qaUserId4}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId/add-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId",
								"add-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Users from User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId4}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId/remove-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId",
								"remove-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Users to User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userIds\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\",\n        \"{{qaUserId5}}\",\n        \"{{qaUserId4}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId/add-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId",
								"add-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User Lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"postman.setEnvironmentVariable(\"UserListsIdB\", jsonData.userLists[1].id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userLists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"searchValue\": \"QA UserList 1\",\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"name\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search UserList for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userLists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortUserBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"sortUserListBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/user-list/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"user-list",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search UserList and User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userLists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortUserBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"sortUserListBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Users from User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"username\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userLstId/search-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userLstId",
								"search-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userLstId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User List workforceud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"QA UserList\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workforceudUserListId\", jsonData[0].id);",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/:organization/userLists?filter[limit]=30&filter[where][usage][nin][]=everyone,channel,admin&filter[order]=name ASC&filter[where][name][like]=QA UserList",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								":organization",
								"userLists"
							],
							"query": [
								{
									"key": "filter[limit]",
									"value": "30"
								},
								{
									"key": "filter[where][usage][nin][]",
									"value": "everyone,channel,admin"
								},
								{
									"key": "filter[order]",
									"value": "name ASC"
								},
								{
									"key": "filter[where][name][like]",
									"value": "QA UserList"
								}
							],
							"variable": [
								{
									"key": "organization",
									"value": "{{workforceudQAOrgId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users in UserList workforceud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListId\", jsonData.userListId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{workforceudAuthorizationadmin}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/userLists/:id/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"userLists",
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{workforceudUserListId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attributes",
			"item": [
				{
					"name": "Create Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 1 {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeId2\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 2 {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeId3\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 3 {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeId4\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 4 {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute UTF8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeId5\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute เจสันอยู่ที่นี่ {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute 4 delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeIdDeleted\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 2Bdeleted\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"notFound\");",
									"    pm.expect(pm.response.text()).to.include(\"found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributeIds\": [\n    \"{{AttributeId1}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/find",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"find"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Attributes with not",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"notFound\");",
									"    pm.expect(pm.response.text()).to.include(\"found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributeIds\": [\n    \"{{AttributeId1}}\",\"5b7b6ef6-c327-4ae8-9eda-c2923983f355\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/find",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"find"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Attributes empty array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"attributeIds\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"attributeIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/find",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"find"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute 4 delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"{{AttributeIdDeleted}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/:attributeId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								":attributeId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "attributeId",
									"value": "{{AttributeIdDeleted}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/:attributeId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								":attributeId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "attributeId",
									"value": "{{AttributeIdDeleted}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"addedAttributeIds\" : [\n      \"{{AttributeId1}}\",\n      \"{{AttributeId2}}\",\n      \"{{AttributeId3}}\"\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"attributeIds\" : [\n      \"{{AttributeId1}}\",\n      \"{{AttributeId2}}\",\n      \"{{AttributeId3}}\"\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId/assign-attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId",
								"assign-attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "placeId",
									"value": "{{placeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"addedAttributeIds\" : [\n      \"{{AttributeId1}}\",\n      \"{{AttributeId2}}\",\n      \"{{AttributeId3}}\"\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/:roleId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								":roleId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "roleId",
									"value": "{{roleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Place Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"limit\": 0,\n\"offset\": 0,\n\"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "placeId",
									"value": "{{placeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Role Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"limit\": 0,\n\"offset\": 0,\n\"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/:roleId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								":roleId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "roleId",
									"value": "{{roleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"limit\": 0,\n\"offset\": 0,\n\"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute bulk delete 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeIdDeleted1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Attribute 2Bdeleted {{$timestamp}} {{$randomAdjective}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute bulk delete 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeIdDeleted2\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 2Bdeleted {{$timestamp}} {{$randomAdjective}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute bulk delete 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeIdDeleted3\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 2Bdeleted {{$timestamp}} {{$randomAdjective}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute bulk delete 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AttributeIdDeleted4\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"QA Attribute 2Bdeleted {{$timestamp}} {{$randomAdjective}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"useCount\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Delete Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"attributeIds\": [\n        \"{{AttributeIdDeleted1}}\",\n        \"{{AttributeIdDeleted2}}\",\n        \"{{AttributeIdDeleted3}}\",\n        \"{{AttributeIdDeleted4}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Role",
			"item": [
				{
					"name": "Create User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"UserRoleId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"placeId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"roleId\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeId\": \"{{placeId}}\",\n  \"roleId\": \"{{roleId}}\",\n  \"userId\": \"{{qaUserId2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-roles"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"placeId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"roleId\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeId\": \"{{placeId}}\",\n  \"roleId\": \"{{roleId}}\",\n  \"userId\": \"{{qaUserId3}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-roles/:userRoleId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-roles",
								":userRoleId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userRoleId",
									"value": "{{UserRoleId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"placeId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"roleId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-roles/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-roles",
								""
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to Role u1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeId\": \"{{placeId}}\",\n    \"roleId\": \"{{roleId}}\",\n    \"userId\": \"{{qaUserId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:orgId/user-roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":orgId",
								"user-roles"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to Role u2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeId\": \"{{placeId}}\",\n    \"roleId\": \"{{roleId}}\",\n    \"userId\": \"{{qaUserId2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:orgId/user-roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":orgId",
								"user-roles"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to Role u4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeId\": \"{{placeId}}\",\n    \"roleId\": \"{{roleId}}\",\n    \"userId\": \"{{qaUserId4}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:orgId/user-roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":orgId",
								"user-roles"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to Role u5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"placeId\": \"{{placeId}}\",\n    \"roleId\": \"{{roleId}}\",\n    \"userId\": \"{{qaUserId5}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:orgId/user-roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":orgId",
								"user-roles"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Role Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"a\",\n  \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/:roleId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								":roleId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "roleId",
									"value": "{{roleId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WorkFlows",
			"item": [
				{
					"name": "Create Workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workflowId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"WFX Workflow {{$timestamp}}\",\n    \"targetPlaceTypeId\": \"{{placeTypeId}}\",\n    \"participants\": {\n        \"assigneeRoleIds\": [\n            \"{{roleId}}\"\n        ]\n    },\n    \"assignmentPlaces\": [\n        {\n            \"placeId\": \"{{placeId}}\",\n            \"allPlaceChildren\": false\n        }\n    ],\n    \"attributesGroups\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/workflows/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Workflow as user Error check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"WFX Workflow {{$timestamp}}\",\n    \"targetPlaceTypeId\": \"{{placeTypeId}}\",\n    \"participants\": {\n        \"assigneeRoleIds\": [\n            \"{{roleId}}\"\n        ]\n    },\n    \"assignmentPlaces\": [\n        {\n            \"placeId\": \"{{placeId}}\",\n            \"allPlaceChildren\": false\n        }\n    ],\n    \"attributesGroups\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/workflows/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "search workflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"limit\": 0,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/workflows/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workflowId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/workflows/:workflowId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								":workflowId"
							],
							"variable": [
								{
									"key": "workflowId",
									"value": "{{workflowId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hashtags",
			"item": [
				{
					"name": "Create Hashtag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"qahashtag\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"qahashtag{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag length 101",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"name\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag length 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\"\\:\\\"ABCDEFGHIJabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\\\"\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"hashtag100char\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"ABCDEFGHIJabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag length 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"name\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag length 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\"\\:\\\"Z\\\"\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"hashtag1char\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag all numeric",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"qa-hashtag\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"qa-hashtag{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"hashtag3\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"QAHashTag{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"HASHTAG_ALREADY_EXISTS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"QAHashTag\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Hashtags Fokoud 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\"\\:\\\"\\Z\\\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/:id/searchHashtags?query=Z",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								":id",
								"searchHashtags"
							],
							"query": [
								{
									"key": "query",
									"value": "Z"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{workforceudQAOrgId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Hashtags Fokoud 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\"\\:\\\"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\\\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/:id/searchHashtags?query=ABCDEFGHIJabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								":id",
								"searchHashtags"
							],
							"query": [
								{
									"key": "query",
									"value": "ABCDEFGHIJabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{workforceudQAOrgId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Hashtag 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\"\\:\\\"ABCDEFGHIJabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"partialName\": \"ABCDEFGHIJ\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Hashtags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"partialName\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Hashtag 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"QAHashTag2c{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag/:hashtagId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag",
								":hashtagId"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "hashtagId",
									"value": "{{hashtag3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Hashtag 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"hashtagIds\": [\n    \"{{hashtag3}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Hashtag 101 & 1 char",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"hashtagIds\": [\n    \"{{hashtag1char}}\", \"{{hashtag100char}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hashtag UTF8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"QA杰森在这里เจสันอยู่ที่นี่\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"QA杰森在这里เจสันอยู่ที่นี่{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Hashtags Fokoud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"hashtag\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/:communityId/searchHashtags",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								":communityId",
								"searchHashtags"
							],
							"variable": [
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Broadcasts",
			"item": [
				{
					"name": "Create Department",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"DepartmentId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"QA Department {{$timestamp}} {{$randomBsBuzz}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/departments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"departments"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast No Privilege",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"BroadcastId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INSUFFICIENT_PRIVILEGES\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "Access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast\",\n        \"description\": \"QA E2E Broadcast\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User privlieges ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"broadcastGatekeeper\": true,\n    \"broadcaster\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"privileges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUserQAadmin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Privileges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"broadcaster\": true,\n\"broadcastGatekeeper\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"privileges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaAdmine2eId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable Org To Gatekeper Privileges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"broadcastGatekeeperEnabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Audience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userIds\": [\n        \"11a5e3fe-9ad1-40ab-b9a4-30a2242f9e09\",\n        \"941c60cd-9c0a-45fc-94d7-6f0c5657d1c9\",\n        \"7610bbfb-1bdf-4851-a249-58bdff20f17e\",\n        \"2c9cf068-e6c3-43c2-903c-5f3fd182f7db\",\n        \"6ac6c75d-d948-4084-a25a-17d5714a00a8\"\n    ],\n    \"userListIds\": null,\n    \"allRoles\": false,\n    \"roleIds\": [\n        \"fc47cb11-fc2b-44ca-80d3-b5877819d838\",\n        \"9960ef90-d802-4dda-8998-158e6806497c\",\n        \"33de92da-9939-4cd0-b6bc-13d42032bd96\",\n        \"8eccfdae-f6ca-437d-b6d3-b2f96d3b9692\"\n    ],\n    \"allPlaces\": true,\n    \"places\": null,\n    \"attributeGroups\": null,\n    \"name\": \"WFX-Audience-{{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/audience",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"audience"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"broadcastId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = new Date();",
									"time.setHours(time.getHours()+1);",
									"var visibleDate = time.toISOString();",
									"//console.log('24 hours added:' + timeArchive);",
									"pm.globals.set(\"visibleDateA\", visibleDate)",
									"",
									"var time = new Date();",
									"time.setHours(time.getHours()+48);",
									"var archiveDates = time.toISOString();",
									"//console.log('24 hours added:' + timeArchive);",
									"pm.globals.set(\"archiveDatesA\", archiveDates)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast SINGLE {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"description\": \"QA E2E Broadcast SINGLE 5 users {{$randomBsBuzz}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"images\": [\n        {\n            \"id\": \"60be4970021403001122eaba\",\n            \"description\": null\n        },\n        {\n            \"id\": \"60be4970021403001122eabb\",\n            \"description\": \"description\"\n        },\n        {\n            \"id\": \"60be4971021403001122eabc\",\n            \"description\": \"string description\"\n        }\n    ],\n    \"isSubmit\": true,\n    \"attachments\": {\n        \"added\": [\n            \"60be51f8021403001122eb38\"\n        ],\n        \"schedule\": {\n            \"visibleDate\": \"{{visibleDateA}}\",\n            \"archiveDate\": \"{{nularchiveDatesAl}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 4 Privileges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"broadcaster\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"privileges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUser4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Gated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"broadcastId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUser4}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenUser4}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast GATED {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"description\": \"QA E2E Broadcast DISCO Stu GATED {{$randomBsAdjective}} {{$randomLoremParagraph}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"images\": [\n        {\n            \"id\": \"60be4970021403001122eaba\",\n            \"description\": null\n        },\n        {\n            \"id\": \"60be4970021403001122eabb\",\n            \"description\": \"description\"\n        },\n        {\n            \"id\": \"60be4971021403001122eabc\",\n            \"description\": \"string description\"\n        }\n    ],\n    \"isSubmit\": true,\n    \"attachments\": {\n        \"added\": [\n            \"60be49e0021403001122eac3\"\n        ],\n        \"schedule\": {\n            \"visibleDate\": null,\n            \"archiveDate\": null\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"BroadcastId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast UPDATED {{$randomAdjective}}\",\n        \"description\": \"QA E2E Broadcast UpDaTeD  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"images\": null,\n    \"documents\": null,\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": null,\n        \"allRoles\": null,\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"allPlaces\": null,\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ]\n    },\n    \"broadcastId\": \"{{broadcastId1}}\",\n    \"isSubmit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Update DATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"BroadcastId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast UPDATED {{$randomAdjective}}\",\n        \"description\": \"QA E2E Broadcast UpDaTeD  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"images\": null,\n    \"documents\": null,\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": null,\n        \"allRoles\": null,\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"allPlaces\": null,\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ]\n    },\n    \"broadcastId\": \"{{broadcastId1}}\",\n    \"isSubmit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"broadcastId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast two {{$randomAdjective}}\",\n        \"description\": \"QA E2E Broadcast two  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\",\n                    \"{{AttributeId4}}\",\n                    \"{{AttributeId3}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"broadcastId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast two {{$timestamp}} {{$randomAdjective}}\",\n        \"description\": \"QA E2E Broadcast two  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\",\n                    \"{{AttributeId4}}\",\n                    \"{{AttributeId3}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast 500 Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"broadcastId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast two {{$randomAdjective}}\",\n        \"description\": \"QA E2E Broadcast two  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\",\n                    \"{{AttributeId4}}\",\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast User Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"BroadcastId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast Broadcast User Only {{$timestamp}}\",\n        \"description\": \"QA E2E Broadcast User Only  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"URGENT\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{principalUseradmin}}\"\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Scheduled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"BroadcastIdSched\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = new Date();",
									"time.setHours(time.getHours()+1);",
									"var visibleDate = time.toISOString();",
									"//console.log('24 hours added:' + timeArchive);",
									"pm.globals.set(\"visibleDate\", visibleDate)",
									"",
									"var time = new Date();",
									"time.setHours(time.getHours()+48);",
									"var archiveDates = time.toISOString();",
									"//console.log('24 hours added:' + timeArchive);",
									"pm.globals.set(\"archiveDates\", archiveDates)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast Scheduled +1h {{$randomBsAdjective}} {{$timestamp}}\",\n        \"description\": \"QA E2E Broadcast Scheduled +1hour archive +48h {{$randomBsBuzz}}  {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": \"{{visibleDate}}\",\n        \"archiveDate\": \"{{archiveDates}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Scheduled 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast Scheduled +1h {{$randomBsAdjective}} {{$timestamp}}\",\n        \"description\": \"QA E2E Broadcast Scheduled 2 hella ultra mega {{$randomBsBuzz}} {{$randomLoremWords}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": true,\n    \"schedule\": {\n        \"visibleDate\": \"{{visibleDate}}\",\n        \"archiveDate\": \"{{archiveDates}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts Gated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"visibleDate\");",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"gatedBroadcastId\", jsonData.broadcasts[0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"GATED\",\n    \"limit\": 0,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Gated Broadcast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/:broadcastId/approve-gated",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								":broadcastId",
								"approve-gated"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "broadcastId",
									"value": "{{gatedBroadcastId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Broadcast Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"broadcastId\", jsonData.feed[0].broadcastId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcastId\");",
									"    pm.expect(pm.response.text()).to.include(\"priority\");",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"    pm.expect(pm.response.text()).to.include(\"visibleDate\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('randomNumberfeed', Math.floor(Math.random() * 60));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/broadcasts/feed",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"broadcasts",
								"feed"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUserQAadmin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Broadcast Feed User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"broadcastId\", jsonData.feed[0].broadcastId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcastId\");",
									"    pm.expect(pm.response.text()).to.include(\"organizationId\");",
									"    pm.expect(pm.response.text()).to.include(\"audienceId\");",
									"    pm.expect(pm.response.text()).to.include(\"visibleDate\");",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('randomNumberfeed', Math.floor(Math.random() * 60));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenUseradmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/broadcasts/feed",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"broadcasts",
								"feed"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseradmin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"unreadBroadcastCount\");",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId=5e598f45c21d703aa7ab1964",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "5e598f45c21d703aa7ab1964"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUserQAadmin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Broadcast Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"unreadCount\");",
									"    pm.expect(pm.response.text()).to.include(\"draftCount\");",
									"    pm.expect(pm.response.text()).to.include(\"scheduledCount\");",
									"    pm.expect(pm.response.text()).to.include(\"unreadBroadcastId\");",
									"    pm.expect(pm.response.text()).to.include(\"gatedCount\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/broadcasts/badges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"broadcasts",
								"badges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUserQAadmin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Broadcast Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"broadcastIds\": [\n    \"{{broadcastId}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/read",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"read"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Draft",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"BroadcastDraftId\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast in Draft state {{$timestamp}}\",\n        \"description\": \"QA E2E Broadcast in Draft state   {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": false,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts Draft",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcasts\");",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"department\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"DRAFT\",\n    \"limit\": 0,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive Broadcast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/:broadcastId/archive",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								":broadcastId",
								"archive"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "broadcastId",
									"value": "{{BroadcastDraftId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts Archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcasts\");",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"department\");",
									"    pm.expect(pm.response.text()).to.include(\"priority\");",
									"    pm.expect(pm.response.text()).to.include(\"audienceUserCount\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"ARCHIVED\",\n    \"limit\": 0,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Gated Broadcast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/clear-gated-list",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"clear-gated-list"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts Schedlued",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcasts\");",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"department\");",
									"        pm.expect(pm.response.text()).to.include(\"visibleDate\");",
									"            pm.expect(pm.response.text()).to.include(\"archiveDate\");",
									"                pm.expect(pm.response.text()).to.include(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"SCHEDULED\",\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Broadcast Feed User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"broadcastId\", jsonData.feed[0].broadcastId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcastId\");",
									"    pm.expect(pm.response.text()).to.include(\"organizationId\");",
									"        pm.expect(pm.response.text()).to.include(\"audienceId\");",
									"            pm.expect(pm.response.text()).to.include(\"title\");",
									"                pm.expect(pm.response.text()).to.include(\"description\");    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('randomNumberfeed', Math.floor(Math.random() * 60));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUser4}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenUser4}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/broadcasts/feed",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"broadcasts",
								"feed"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUser4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges U4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"        pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"            pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"        pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"            pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"            pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUser4}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenUser4}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorization4}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUser4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Broadcast Badges U4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"unreadCount\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"draftCount\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"scheduledCount\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"unreadBroadcastId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"gatedCount\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUser4}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenUser4}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/broadcasts/badges",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"broadcasts",
								"badges"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUser4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Broadcast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"broadcastIds\": [\n        \"{{BroadcastDraftId}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"delete"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast no title Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"\",\n        \"description\": \"QA E2E Broadcast DISCO Stu\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"images\": [\n        {\n            \"id\": \"5f7775bd6a286d000f9ece68\",\n            \"description\": null\n        },\n        {\n            \"id\": \"5f7775bd6a286d000f9ece6a\",\n            \"description\": \"description\"\n        },\n        {\n            \"id\": \"5f7775bd6a286d000f9ece69\",\n            \"description\": \"string description\"\n        }\n    ],\n    \"isSubmit\": true,\n    \"attachments\": {\n        \"added\": [\n            \"5f6cb4b73a195c001051642e\"\n        ],\n        \"schedule\": {\n            \"visibleDate\": null,\n            \"archiveDate\": null\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast no all Errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_REQUEST_DATA\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"details.description\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"details.departmentId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"audience.userIds\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"audience.userListIds\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"audience.roleIds\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"audience.places[0].placeId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"audience.attributeGroups[0].isAttributes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"Just a title\",\n        \"description\": \"\",\n        \"departmentId\": \"\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"\"\n        ],\n        \"userListIds\": [\n            \"\"\n        ],\n        \"roleIds\": [\n            \"\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": false,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Organization Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"username\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"searchValue\": \"\",\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"isAdmin\": true,\n  \"isArchived\": false,\n  \"includeAvatars\": false,\n  \"broadcaster\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast 2 Archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"archiveBroadcastId1\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast SINGLE {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"description\": \"QA E2E Broadcast SINGLE 5 users {{$randomBsBuzz}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"images\": [\n        {\n            \"id\": \"60be4970021403001122eaba\",\n            \"description\": null\n        },\n        {\n            \"id\": \"60be4970021403001122eabb\",\n            \"description\": \"description\"\n        },\n        {\n            \"id\": \"60be4971021403001122eabc\",\n            \"description\": \"string description\"\n        }\n    ],\n    \"isSubmit\": true,\n    \"attachments\": {\n        \"added\": [\n            \"60be51f8021403001122eb38\"\n        ],\n        \"schedule\": {\n            \"visibleDate\": null,\n            \"archiveDate\": null\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive Broadcast Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/:broadcastId/archive",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								":broadcastId",
								"archive"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "broadcastId",
									"value": "{{archiveBroadcastId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Draft Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast in Draft state {{$timestamp}}\",\n        \"description\": \"QA E2E Broadcast in Draft state   {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"isSubmit\": false,\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"archiveDate\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Broadcast Gated Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUser4}}"
							},
							{
								"key": "Access-token",
								"type": "text",
								"value": "{{accessTokenUser4}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"details\": {\n        \"title\": \"QA Broadcast GATED {{$isoTimestamp}} {{$randomBsAdjective}}\",\n        \"description\": \"QA E2E Broadcast DISCO Stu GATED {{$randomBsAdjective}} {{$randomLoremParagraph}}\",\n        \"departmentId\": \"{{DepartmentId1}}\",\n        \"priority\": \"NORMAL\"\n    },\n    \"audience\": {\n        \"userIds\": [\n            \"{{qaUserId}}\",\n            \"{{qaUserId2}}\",\n            \"{{qaUserId3}}\",\n            \"{{qaUserId4}}\",\n            \"{{qaUserId5}}\"\n        ],\n        \"userListIds\": [\n            \"{{UserListId}}\"\n        ],\n        \"roleIds\": [\n            \"{{roleId}}\"\n        ],\n        \"places\": [\n            {\n                \"placeId\": \"{{placeId}}\",\n                \"isFullySelected\": true\n            }\n        ],\n        \"attributeGroups\": [\n            {\n                \"isAttributes\": [\n                    \"{{AttributeId1}}\"\n                ],\n                \"isNotAttributes\": [\n                    \"{{AttributeId2}}\"\n                ]\n            }\n        ],\n        \"allRoles\": false,\n        \"allPlaces\": false\n    },\n    \"images\": [\n        {\n            \"id\": \"60be4970021403001122eaba\",\n            \"description\": null\n        },\n        {\n            \"id\": \"60be4970021403001122eabb\",\n            \"description\": \"description\"\n        },\n        {\n            \"id\": \"60be4971021403001122eabc\",\n            \"description\": \"string description\"\n        }\n    ],\n    \"isSubmit\": true,\n    \"attachments\": {\n        \"added\": [\n            \"60be49e0021403001122eac3\"\n        ],\n        \"schedule\": {\n            \"visibleDate\": null,\n            \"archiveDate\": null\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/save",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"save"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Attributes",
			"item": [
				{
					"name": "Search Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"attributes\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"useCount\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"attributeId\", jsonData.attributes[1].id);",
									"postman.setEnvironmentVariable(\"attrib0\", jsonData.attributes[0].id);",
									"postman.setEnvironmentVariable(\"attrib1\", jsonData.attributes[1].id);",
									"postman.setEnvironmentVariable(\"attrib2\", jsonData.attributes[2].id);",
									"postman.setEnvironmentVariable(\"attrib3\", jsonData.attributes[3].id);",
									"postman.setEnvironmentVariable(\"attrib4\", jsonData.attributes[4].id);",
									"postman.setEnvironmentVariable(\"attrib5\", jsonData.attributes[5].id);",
									"postman.setEnvironmentVariable(\"attrib6\", jsonData.attributes[6].id);",
									"postman.setEnvironmentVariable(\"attrib7\", jsonData.attributes[7].id);",
									"postman.setEnvironmentVariable(\"attrib8\", jsonData.attributes[8].id);",
									"postman.setEnvironmentVariable(\"attrib9\", jsonData.attributes[9].id);",
									"postman.setEnvironmentVariable(\"attrib10\", jsonData.attributes[10].id);",
									"postman.setEnvironmentVariable(\"attrib11\", jsonData.attributes[11].id);",
									"postman.setEnvironmentVariable(\"attrib12\", jsonData.attributes[12].id);",
									"postman.setEnvironmentVariable(\"attrib13\", jsonData.attributes[13].id);",
									"postman.setEnvironmentVariable(\"attrib14\", jsonData.attributes[14].id);",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"qa\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attributes Use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");",
									"});",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"\\x22useCount\\x22:\\x221\\x22\");",
									"//});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/:attributes/uses/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								":attributes",
								"uses",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "attributes",
									"value": "{{attributeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"found\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"notFound\");",
									"});",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"\\x22useCount\\x22:\\x221\\x22\");",
									"//});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"attributeIds\": [\n        \"{{attributeId}}\",\n        \"{{AttributeId1}}\",\n        \"{{AttributeId2}}\",\n        \"{{AttributeId3}}\",\n        \"5b7b6ef6-c327-4ae8-9eda-c2923983f355\",\n        \"{{AttributeId4}}\",\n        \"{{attrib0}}\",\n        \"{{attrib1}}\",\n        \"{{attrib2}}\",\n        \"{{attrib3}}\",\n        \"{{attrib4}}\",\n        \"{{attrib5}}\",\n        \"{{attrib6}}\",\n        \"{{attrib7}}\",\n        \"{{attrib8}}\",\n        \"{{attrib9}}\",\n        \"{{attrib10}}\",\n        \"{{attrib11}}\",\n        \"{{attrib12}}\",\n        \"{{attrib13}}\",\n        \"{{attrib14}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/find",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"find"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Attributes empty array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"errors\\\"\\:\\{\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"attributeIds\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"attributeIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/find",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"find"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth & workforceuds",
			"item": [
				{
					"name": "installations Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIdU3\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "workforceud User Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//const loginToken = postman.getResponseHeader(\"login-token\");",
									"//pm.environment.set(\"xloginTokenadmin\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"EXISTING_MIGRATED_USER\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{xclientIdadmin}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"qaadmin@workforcesoftware.com\",\n    \"installationId\": \"{{clientIdadmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenU3\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdU3}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaUser3}}\",\n     \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get reset-password Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//let str = pm.response.text()",
									"//pm.globals.set(\"password-tokenU3\", str.split(\"services/\")[1].split(\"\\x22\")[0])",
									"",
									"let str = pm.response.text()",
									"pm.globals.set(\"password-tokenU3\", str.split(\"services/\")[1].split(\"?uniqueName\")[0])",
									"console.log"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{workforceudAuthorizationSuperAdmin}}"
							},
							{
								"key": "referer",
								"value": "https://wfx-staging.workforce-services.com",
								"type": "text"
							},
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/reset-password/link?sendEmail=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"reset-password",
								"link"
							],
							"query": [
								{
									"key": "sendEmail",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{qaUserId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "reset-password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "reset-password-token",
								"value": "{{password-tokenU3}}",
								"type": "text"
							},
							{
								"key": "origin",
								"value": "\"https://wfx-staging.workforce-services.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"newPassword\": \"Password1!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/users/reset-password",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenU3b\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									"",
									"const response = pm.response.json(); // Parse the response",
									"if (response.created === false) { // Some condition to decide if retrying the request is needed",
									"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
									"  postman.setNextRequest(pm.info.requestId); // retry the current request",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{clientIdU3}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaUser3}}\",\n     \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "SSO Login URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//const loginToken = postman.getResponseHeader(\"login-token\");",
									"//pm.environment.set(\"xloginTokenadmin\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ssoLoginUrl\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{clientIdU3}}"
							},
							{
								"key": "login-token",
								"type": "text",
								"value": "{{loginTokenU3b}}"
							},
							{
								"key": "origin",
								"type": "text",
								"value": "playground.workforce-services.com"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser3}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/sso/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"sso",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"const Authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"AuthorizationU3\", Authorization);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenU3b}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIdU3}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{qaUser3}}\",\n\t\"password\": \"Password1!\",\n      \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"searchValue\": \"qa\",\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"includeAvatars\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User search workforceud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"servicesId\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TaskUser0\", jsonData[0].id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TaskUser1\", jsonData[1].id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TaskUser2\", jsonData[2].id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TaskUser3\", jsonData[3].id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TaskUser4\", jsonData[4].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{AuthorizationU3}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/users/search?query=qa&limit=10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "qa"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Channel Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"communityId\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"GeneralChannelId\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{AuthorizationU3}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/users/channels",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users",
								"channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TestChannelId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{AuthorizationU3}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"communityId\": \"{{workforceudQAOrgId}}\",\n    \"type\": \"open\",\n    \"name\": \"Test Channel {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/channels/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"channels",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{AuthorizationU3}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/channels/:channelId/follow",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"channels",
								":channelId",
								"follow"
							],
							"variable": [
								{
									"key": "channelId",
									"value": "{{TestChannelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Channel Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{AuthorizationU3}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"channelId\": \"{{GeneralChannelId}}\",\n    \"content\": \"test Post Test\\n\\n@QA UserList 1 @qau2Jason qau2Dowler \",\n    \"mentions\": [\n        {\n            \"id\": \"{{UserListsIdA}}\",\n            \"idType\": \"UserList\",\n            \"indices\": [\n                16,\n                30\n            ],\n            \"text\": \"@QA UserList 1\"\n        },\n        {\n            \"id\": \"{{qaUserId2}}\",\n            \"idType\": \"User\",\n            \"indices\": [\n                31,\n                52\n            ],\n            \"text\": \"@qau2Jason qau2Dowler\"\n        }\n    ],\n    \"fileIds\": [],\n    \"type\": \"text\",\n    \"documentIds\": [],\n    \"communityId\": \"{{workforceudQAOrgId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Channel feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"feedPosts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{AuthorizationU3}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/channels/:channelId/feed?filter[limit]=20",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"channels",
								":channelId",
								"feed"
							],
							"query": [
								{
									"key": "filter[limit]",
									"value": "20"
								}
							],
							"variable": [
								{
									"key": "channelId",
									"value": "{{GeneralChannelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"taskID\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflow\": {\n        \"requireApproval\": true\n    },\n    \"name\": \"Test Task {{$isoTimestamp}}\",\n    \"steps\": [\n        {\n            \"type\": \"action\",\n            \"description\": \"Action\"\n        }\n    ],\n    \"channelId\": \"{{GeneralChannelId}}\",\n    \"description\": \"Test Task\",\n    \"invitees\": [\n        {\n            \"cause\": \"projectAssignment\",\n            \"id\": \"{{TaskUser1}}\",\n            \"type\": \"user\"\n        },\n        {\n            \"cause\": \"projectAssignment\",\n            \"id\": \"{{TaskUser2}}\",\n            \"type\": \"user\"\n        },\n        {\n            \"cause\": \"projectAssignment\",\n            \"id\": \"{{TaskUser3}}\",\n            \"type\": \"user\"\n        },\n        {\n            \"cause\": \"projectAssignment\",\n            \"id\": \"{{TaskUser4}}\",\n            \"type\": \"user\"\n        }\n    ],\n    \"mentions\": [],\n    \"communityId\": \"{{workforceudQAOrgId}}\",\n    \"type\": \"imageSelection\",\n    \"documentIds\": []\n}"
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/projects",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"FolderId\", jsonData.id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"parentFolderId\", jsonData.parentFolderId);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"folderName\", jsonData.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"parentFolderId\": \"{{rootFolderId}}\",\n    \"name\": \"AAA123-folder-{{$timestamp}}\",\n    \"communityId\": \"{{workforceudQAOrgId}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/folders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"folders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Folder Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"settingName\": \"readWrite\",\n    \"operation\": \"add\",\n    \"users\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\",\n        \"{{qaUserId3}}\",\n        \"{{qaUserId4}}\",\n        \"{{qaUserId5}}\",\n        \"{{qaAdmine2eId}}\"\n    ],\n    \"userLists\": []\n}"
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:oraganizationid/folders/:folderId/updateAccess",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":oraganizationid",
								"folders",
								":folderId",
								"updateAccess"
							],
							"variable": [
								{
									"key": "oraganizationid",
									"value": "{{qaOrg}}"
								},
								{
									"key": "folderId",
									"value": "{{FolderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Folder Access Error - FolderId from other Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User does not have permission to add new writers/readers to this folder\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationQA}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"settingName\": \"readWrite\",\n    \"operation\": \"add\",\n    \"users\": [\n        \"{{qaUserId}}\",\n        \"{{qaUserId2}}\",\n        \"{{qaUserId3}}\",\n        \"{{qaUserId4}}\",\n        \"{{qaUserId5}}\",\n        \"{{qaAdmine2eId}}\",\n        \"{{principalUseruserAMY}}\"\n    ],\n    \"userLists\": []\n}"
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:oraganizationid/folders/:folderId/updateAccess",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":oraganizationid",
								"folders",
								":folderId",
								"updateAccess"
							],
							"variable": [
								{
									"key": "oraganizationid",
									"value": "{{qaOrg}}"
								},
								{
									"key": "folderId",
									"value": "62867263a4443200121f0b8a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Folders as User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Get the variable value",
									"var testVar= pm.environment.get(\"folderName\");",
									"",
									"//Validate whether entire response value as a text contains the variable value. ",
									"pm.test(\"Validate if response contains variable.\", function () {",
									"     pm.expect(pm.response.text()).to.include(testVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization4}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/folders/:rootFolder/childFolders?filter[order]=name+ASC",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"folders",
								":rootFolder",
								"childFolders"
							],
							"query": [
								{
									"key": "filter[where][name][like]",
									"value": "folder",
									"disabled": true
								},
								{
									"key": "filter[where][name][options]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[order]",
									"value": "name+asc",
									"disabled": true
								},
								{
									"key": "filter[order]",
									"value": "name+ASC"
								}
							],
							"variable": [
								{
									"key": "rootFolder",
									"value": "{{rootFolderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Folder as User4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Get the variable value",
									"var testVar= pm.environment.get(\"folderName\");",
									"",
									"//Validate whether entire response value as a text contains the variable value. ",
									"pm.test(\"Validate if response contains variable.\", function () {",
									"     pm.expect(pm.response.text()).to.include(testVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization4}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/folders/{{rootFolderId}}/search?filter[limit]=20&filter[skip]=0&filter[q]=folder&filter[communityId]={{qaOrg}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"folders",
								"{{rootFolderId}}",
								"search"
							],
							"query": [
								{
									"key": "filter[limit]",
									"value": "20"
								},
								{
									"key": "filter[skip]",
									"value": "0"
								},
								{
									"key": "filter[q]",
									"value": "folder"
								},
								{
									"key": "filter[communityId]",
									"value": "{{qaOrg}}"
								},
								{
									"key": "filter[where][name][like]",
									"value": "folder",
									"disabled": true
								},
								{
									"key": "filter[where][name][options]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[order]",
									"value": "name+asc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Re-Sync Calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/calendarEvents/manual-sync?startDate={{$isoTimestamp}}&endDate=2022-03-23T20:13:19.500Z",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"calendarEvents",
								"manual-sync"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{$isoTimestamp}}"
								},
								{
									"key": "filter[where][name][like]",
									"value": "folder",
									"disabled": true
								},
								{
									"key": "filter[where][name][options]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[order]",
									"value": "name+asc",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2022-03-23T20:13:19.500Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Calendar workforce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/calendarEvents?communityId={{workforceIdH}}&startDate=2021-03-21T04:00:00.000Z&endDate=2022-03-28T04:00:00.000Z",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"calendarEvents"
							],
							"query": [
								{
									"key": "communityId",
									"value": "{{workforceIdH}}"
								},
								{
									"key": "startDate",
									"value": "2021-03-21T04:00:00.000Z"
								},
								{
									"key": "endDate",
									"value": "2022-03-28T04:00:00.000Z"
								},
								{
									"key": null,
									"value": "2021-03-23T19:30:56.581Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Calendar workforce 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/calendarEvents?communityId={{workforceIdH}}&startDate={{$isoTimestamp}}&endDate=2022-03-28T04:00:00.000Z",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"calendarEvents"
							],
							"query": [
								{
									"key": "communityId",
									"value": "{{workforceIdH}}"
								},
								{
									"key": "startDate",
									"value": "{{$isoTimestamp}}"
								},
								{
									"key": "endDate",
									"value": "2022-03-28T04:00:00.000Z"
								},
								{
									"key": "filter[where][name][like]",
									"value": "folder",
									"disabled": true
								},
								{
									"key": "filter[where][name][options]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[order]",
									"value": "name+asc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Scheduled Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/projects/future-reviewing?limit=20&skip=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"projects",
								"future-reviewing"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "workforceuds",
			"item": [
				{
					"name": "search Community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Get the variable value",
									"var testVar= pm.environment.get(\"workforceudOrgName\");",
									"",
									"//Validate whether entire response value as a text contains the variable value. ",
									"pm.test(\"Validate if response contains variable.\", function () {",
									"     pm.expect(pm.response.text()).to.include(testVar);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"findCommunities\",\n        \"filter\": {\n            \"name\": {\n                \"$regex\": \"{{workforceudOrgName}}\",\n                \"$options\": \"i\"\n            }\n        },\n        \"sort\": \"touchedAt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/superAction",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								"superAction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Privileges workforceUD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/services/organizations/:organizationId/settings/system",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"services",
								"organizations",
								":organizationId",
								"settings",
								"system"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/communities/:communityId/members?filter[q]=qa&limit=45",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"communities",
								":communityId",
								"members"
							],
							"query": [
								{
									"key": "filter[q]",
									"value": "qa"
								},
								{
									"key": "limit",
									"value": "45"
								}
							],
							"variable": [
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Channel Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"communityId\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"GeneralChannelId\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Authorization}}"
							},
							{
								"key": "Authorization",
								"value": "{{AuthorizationSuperAdmin}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/users/channels",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users",
								"channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Channel feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Authorization}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/channels/:channelId/feed?filter[limit]=20",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"channels",
								":channelId",
								"feed"
							],
							"query": [
								{
									"key": "filter[limit]",
									"value": "20"
								}
							],
							"variable": [
								{
									"key": "channelId",
									"value": "{{GeneralChannelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User search workforceud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"JasdonUserId\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/users/search?query=qa&limit=100",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "qa"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User by UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/api/v17/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"v17",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{JasdonUserId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create task & publish",
			"item": [
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskIdsingle\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Task Test superadmin e2e {{$randomCatchPhrase}} {{$timestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"order\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskItem0\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"11 text order 1 {{$randomBsAdjective}}\",\n        \"order\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task Item 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"order\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskItem1\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"image\",\n    \"item\": {\n        \"title\": \"2 image order 2 {{$randomBsAdjective}}\",\n        \"order\": 2,\n        \"min\": 1,\n        \"max\": 5\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task Item 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"order\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskItem2\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"Add a number like 33\",\n        \"order\": 3\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task Item 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"order\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskItem3\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"action\",\n    \"item\": {\n        \"title\": \"action jackson\",\n        \"order\": 4\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task Item 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"order\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskItem4\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"attachment\",\n    \"item\": {\n        \"title\": \"Attachemnet {{$randomBsAdjective}}\",\n        \"order\": 5,\n        \"min\": 1,\n        \"max\": 5\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task Item 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"order\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskItem5\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"poll\",\n    \"item\": {\n        \"title\": \"Poll Title\",\n        \"order\": 6,\n        \"min\": 1,\n        \"max\": 15,\n        \"multiSelect\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add POLL Item 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"pollItem1\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Character Counter - Character Count Tool is a free character counter tool that provides instant character count & word count statistics for a given text. This tool reports the number of character with spaces and without spaces, also the number of words and sentences... Character Count Tool - Character Counter monitors and reports the character counts & word counts of the text that you type in real time. Thus it is suitable for writing text with word/ character limit. The word/ character limit happens in many occasions. For example: Twitter: 280, SMS: 160, Reddit Title: 300, Ebay Title: 80, Yelp Post: 5000, LinkedIn Summary: 2000, Pinterest Description: 500, Blogspot description: 500, Facebook status: 63,206, title tag in HTML: only display 70 characters, meta descriptions in HTML: have no limitation but only first 155 characters are displayed in Google search results. This character counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera1234\",\n  \"hexColor\": \"#3D7961\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items",
								":itemId",
								"poll-options"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add POLL Item 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"pollItem2\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Poll Option 2\",\n  \"hexColor\": \"#C03636\",\n  \"order\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items",
								":itemId",
								"poll-options"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add POLL Item 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"pollItem3\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Poll Option 3\",\n  \"hexColor\": \"#F6D171\",\n  \"order\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items",
								":itemId",
								"poll-options"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task Template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task Template {{$randomAbbreviation}}\",\n  \"description\": \"task description e2e created - can be deleted\",\n  \"isPrivate\": false,\n  \"taskId\": \"{{taskIdsingle}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/task-templates",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"task-templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task Item Reorder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast v ]] the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast v v the number of the beast v v v the number of the beast the number of the beast the number of the beast the number of the beast the number of the beastthe number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast\",\n        \"order\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Participants via Workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"workflowId\": \"{{workflowId}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskid",
								"participants"
							],
							"variable": [
								{
									"key": "taskid",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Task DRAFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"E2E Task Test superuser e2e {{$randomCatchPhrase}}\",\n    \"description\": \"E2E STOREb 1 Task Test, created as SuperAdmin run through e2e {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": null,\n        \"archiveDate\": null,\n        \"enforceDueDate\": true\n    },\n    \"submit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Task DATE ERRORS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_DUE_DATE\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_START_DATE\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"E2E Task Test superuser e2e {{$randomCatchPhrase}}\",\n    \"description\": \"E2E STOREb 1 Task Test, created as SuperAdmin run through e2e {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": \"2020-12-12T12:15:00\",\n        \"startDate\": \"2020-12-12T12:05:00\",\n        \"dueDate\": \"2020-12-12T12:35:00\",\n        \"archiveDate\": null,\n        \"enforceDueDate\": true\n    },\n    \"submit\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = new Date();",
									"time.setHours(time.getHours()+36);",
									"var timeDue = time.toISOString();",
									"pm.globals.set(\"timeDue36\", timeDue)",
									"",
									"var time = new Date();",
									"time.setHours(time.getHours()+48);",
									"var timeArchive48 = time.toISOString();",
									"//console.log('48 hours added:' + timeArchive);",
									"pm.globals.set(\"timeArchive48\", timeArchive48)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"E2E Task Test superuser e2e {{$randomCatchPhrase}}\",\n    \"description\": \"E2E STOREb 1 Task Test, created as SuperAdmin run through e2e {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue36}}\",\n        \"archiveDate\": \"{{timeArchive48}}\",\n        \"enforceDueDate\": true\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task SA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"participants\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId?editMode=true&items=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"query": [
								{
									"key": "editMode",
									"value": "true"
								},
								{
									"key": "items",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"notStarted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store1",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaUser3}}\",\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationuser2319\", authorization)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser3}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\",\n    \"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assigned tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/assigned?limit=90&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"assigned"
							],
							"query": [
								{
									"key": "limit",
									"value": "90"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Id Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdA0\", response.assignments[0].assignmentId);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task Draft",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\",\n                \"{{pollItem3}}\"\n            ]\n        }\n    ],\n    \"submit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task Submit Errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVALID_TASK_ITEM_RESULT\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"poll answer 1\",\n                \"poll answer 2\"\n            ]\n        }\n    ],\n    \"submit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task Submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\", \"{{pollItem2}}\"\n            ]\n        }\n    ],\n    \"submit\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"completed\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store2",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319b\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319b\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaUser}}\",\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319b\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319b\", response.userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319b}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\",\n    \"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdB\", response.assignments[0].assignmentId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\"\n            ]\n    }\n],\n\"submit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store3",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319c\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319c\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaUser4}}\",\n   \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319c\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319c\", response.userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319c}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser4}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\",\n    \"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdC\", response.assignments[0].assignmentId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\",\n                \"{{pollItem2}}\"\n            ]\n        }\n    ],\n    \"submit\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"notStarted\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":2\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":1\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Disable User",
			"item": [
				{
					"name": "installations Admin user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"ArchiveClientIdU3\", jsonData.id);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"ArchiveLoginTokenU3b\", loginToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"authMethodTypes\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{ArchiveClientIdU3}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser3}}\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"ArchiveU3id\", jsonData.userId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{ArchiveLoginTokenU3b}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{ArchiveClientIdU3}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{qaUser3}}\",\n    \"password\": \"Password1!\",\n    \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"DISABLED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"DISABLED\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"status"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{ArchiveU3id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod user3 DISABLED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ACCOUNT_DISABLED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "installation-id",
								"type": "text",
								"value": "{{ArchiveClientIdU3}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"{{qaUser3}}\",\n     \"organizationUniqueName\": \"{{workforceudOrgName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Archive Task",
			"item": [
				{
					"name": "Archive task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserQAadmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenQAadmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/archive",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"archive"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Searching",
			"item": [
				{
					"name": "Search Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"partialName\": \"workforce\",\n    \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Workflowes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"2319-ALL\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/workflows/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								"users",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Org Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:orgid/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":orgid",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "orgid",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users by Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"searchValue\": \"\",\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"isArchived\": false,\n  \"includeAvatars\": false\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Organizations with IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"partialName\": \"\",\n    \"includeTotal\": true,\n    \"organizationIds\": [\n        \"45d4603f-9faf-4277-a232-8425832a7a66\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"userCount\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"taskIds\": [\n    \"{{taskIdsingle}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"searchValue\": \"\",\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"name\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Place Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/place-types/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"place-types",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places with PlaceType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"searchValue\": \"qa\",\n    \"placeTypeId\": \"{{placeTypeId}}\",\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"userCount\",\n        \"order\": \"DESC\"\n    },\n    \"withoutParentOnly\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Place Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "placeId",
									"value": "{{placeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Hashtags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"partialName\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/hashtag/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"hashtag",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User Lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"searchValue\": \"\",\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"userCount\",\n        \"order\": \"DESC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search UserList and User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortUserBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"sortUserListBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search UserList for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortUserBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"sortUserListBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/user-list/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"user-list",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319c}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Role Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/:roleId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								":roleId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "roleId",
									"value": "{{roleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Place Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId/attributes/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId",
								"attributes",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "placeId",
									"value": "{{placeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search PlaceType Places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/place-types/:placeTypeId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"place-types",
								":placeTypeId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "placeTypeId",
									"value": "{{placeTypeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search users in user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/:userListId/search-users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								":userListId",
								"search-users"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userListId",
									"value": "{{UserListId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search user lists and users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search UserList for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/user-list/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"user-list",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Attribute Uses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/attributes/:attributeId/uses/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"attributes",
								":attributeId",
								"uses",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "attributeId",
									"value": "{{AttributeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Role Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/:roleId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								":roleId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								},
								{
									"key": "roleId",
									"value": "{{roleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Audience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/audience/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"audience",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Users by Association",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/audience/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"audience",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Detpartments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\",\n  \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/departments/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"departments",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts GATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"GATED\",\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts DRAFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"DRAFT\",\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts ARCHIVED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"broadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserQAadmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenQAadmin}}"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"ARCHIVED\",\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Broadcasts SCHEDULED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"UserListsIdA\", jsonData.userLists[0].id);",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"audience\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUserSuperAdmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenSuperAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"SCHEDULED\",\n    \"limit\": 20,\n    \"offset\": 0,\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/broadcasts/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"broadcasts",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Deletion Checks",
			"item": [
				{
					"name": "Get userList Broadcasts Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"placeAudiences\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeIds\": [\n    \"{{placeId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-place-audiences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-place-audiences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get userList Broadcasts Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"placeBroadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeIds\": [\n    \"{{placeId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-place-broadcasts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-place-broadcasts"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get userList Role audiences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"roleAudiences\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleIds\": [\n    \"{{roleId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-role-audiences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-role-audiences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get userList Role audiences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"roleBroadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleIds\": [\n    \"{{roleId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-role-broadcasts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-role-broadcasts"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get userList audiences admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userlistAudiences\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userlistIds\": [\n    \"{{UserListId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-userlist-audiences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-userlist-audiences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get userList Broadcasts Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"userlistBroadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userlistIds\": [\n    \"{{UserListId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-userlist-broadcasts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-userlist-broadcasts"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get attribute audience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"attributeBroadcasts\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributeIds\": [\n    \"{{attributeId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-attribute-broadcasts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-attribute-broadcasts"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get attribute audience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"attributeAudiences\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUserSuperAdmin}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenSuperAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributeIds\": [\n    \"{{attributeId}}\"\n  ],\n  \"limit\": 10,\n  \"offset\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/get-attribute-audiences",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"get-attribute-audiences"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{qaOrg}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages Copy",
			"item": [
				{
					"name": "Creat DM Admin",
					"item": [
						{
							"name": "Create DM as Admin to Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ownerId\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"memberIds\");",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"dmId0\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Hi QA Users 3 & 4! DM from Admin to users <mention mention-type=\\\"channel\\\"/> x <mention mention-type=\\\"admins\\\"/> x <mention mention-type=\\\"reviewers\\\"/> x <mention mention-type=\\\"observers\\\"/> x <mention mention-type=\\\"collaborators\\\"/>\",\n    \"memberIds\": [\n        \"{{principalUser3}}\",\n        \"{{principalUser4}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send DM message mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"body\");",
											"});",
											"",
											"const response = pm.response.json();",
											"//pm.environment.set(\"dmId\", response.id);",
											"pm.environment.set(\"adminAuthorId\", response.author.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"Hello QA team members Message 1 <mention mention-type=\\\"userlist\\\" reference-id=\\\"{{UserListsIdA}}\\\"/> <mention mention-type=\\\"userlist\\\" reference-id=\\\"{{UserListsIdB}}\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"{{principalUser4}}\\\"/> you specifally\",\n    \"documentIds\": [],\n    \"fileIds\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/:directConversationId/send-message",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										":directConversationId",
										"send-message"
									],
									"variable": [
										{
											"key": "directConversationId",
											"value": "{{dmId0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send DM message admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"body\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"dmMessageId\", response.id);",
											"pm.environment.set(\"adminAuthorId\", response.author.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"MESSAGE Two {{$randomAdjective}} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non pro, <hashtag hashtag-id=\\\"cf37ee72-f443-473e-9777-2f7065f0b678\\\"\\\"/> <hashtag hashtag-id=\\\"fd7a343a-4709-4f54-9254-364f44ba1c2f\\\"\\\"/>\",\n    \"documentIds\": [\n    ],\n    \"fileIds\": [\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/:directConversationId/send-message",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										":directConversationId",
										"send-message"
									],
									"variable": [
										{
											"key": "directConversationId",
											"value": "{{dmId0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update DM Long message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"body\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"MESSAGE Updated {{$randomAdjective}} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non pro, <hashtag hashtag-id=\\\"cf37ee72-f443-473e-9777-2f7065f0b678\\\"\\\"/> <hashtag hashtag-id=\\\"fd7a343a-4709-4f54-9254-364f44ba1c2f\\\"\\\"/>\",\n    \"documentId\": [\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/:directConversationId/update-message/:messageId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										":directConversationId",
										"update-message",
										":messageId"
									],
									"variable": [
										{
											"key": "directConversationId",
											"value": "{{dmId0}}"
										},
										{
											"key": "messageId",
											"value": "{{dmMessageId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save read checkpoint",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lastReadAt\": \"{{$isoTimestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/:directConversationId/save-read-checkpoint",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										":directConversationId",
										"save-read-checkpoint"
									],
									"variable": [
										{
											"key": "directConversationId",
											"value": "{{dmId0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Messages as sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"contents\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/:directConversationId/feed?limit=20&offset=0&includeTotal=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										":directConversationId",
										"feed"
									],
									"query": [
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "includeTotal",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "directConversationId",
											"value": "{{dmId0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Messages admin",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUserQAadmin}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenQAadmin}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/search/?limit=20&offset=0&includeTotal=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										"search",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "includeTotal",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Messages User",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUser4}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenUser4}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/communications/direct-conversations/search/?limit=100&offset=0&includeTotal=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"direct-conversations",
										"search",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "includeTotal",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get unread badges user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"directConversations\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUser4}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenUser4}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/communications/unread-badges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"communications",
										"unread-badges"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "taskId",
			"value": ""
		}
	]
}