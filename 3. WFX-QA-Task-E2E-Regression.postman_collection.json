{
	"info": {
		"_postman_id": "f243b36d-f122-40d5-9270-82b3763f0eaa",
		"name": "3. WFX-QA-Task-E2E-Regression",
		"description": "Tasks E2E:\n\n*   Create new task as StoreAdmin@2319, task will archive in 5 days from creation\n    *   Add task items\n    *   Publish #1 with Workflow\n    *   Re-publish with AdHoc users\n    *   Re-Publish with AdHoc including Reviewers/Observers\n    *   Re-Publish with Workflow\n*   Submit Assignment as store1@2319\n*   Re-Edit task items (twice)\n    *   Republish\n        *   store1@2319 users submission back *in-progress*\n*   Submit assignments as store2@2319 thru store5\n*   Create basic task with Ad-Hoc users\n    *   Assigneeâ€™s, Reviewers & Observers\n    *   Archive +120h in future\n*   Create Basic Scheduled Task\n    *   Visible +6h, Start +12h, Due +96h, Archive +120h",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8443841"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "SuperAdmin",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIdsa\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokensa\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdsa}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qasuperuser@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokensa\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUsersa\", response.userId);",
											"pm.environment.set(\"workforceOrganizationId\", response.organizationId);",
											"pm.environment.set(\"workforce\", response.organizationId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationsa\", authorization)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokensa}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdsa}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qasuperuser@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\",\n    \"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Community Search workforceud Sync Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"uniqueName\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"workforceudQAOrgId\", jsonData.data[0]._id);",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"rootFolderId\", jsonData.data[0].rootFolderId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "{{workforceudAuthorizationsa}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"findCommunities\",\n        \"filter\": {\n            \"name\": {\n                \"$regex\": \"workforce\",\n                \"$options\": \"i\"\n            },\n            \"type\": \"corporate\"\n        },\n        \"sort\": \"touchedAt\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/v17/communities/superAction",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"v17",
										"communities",
										"superAction"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Privilege Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUsersa}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokensa}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"broadcaster\": true,\n  \"broadcastGatekeeper\": false,\n  \"taskCreator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"organizations",
										":organizationId",
										"users",
										":userId",
										"privileges"
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "{{workforce}}"
										},
										{
											"key": "userId",
											"value": "a6bc47ee-2df1-4d3c-a34c-4f010193ad0e"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SuperAdmin jdowler",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIdsaJD\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokensaJD\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdsaJD}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"jdowler@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokensaJD\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUsersaJD\", response.userId);",
											"pm.environment.set(\"workforceOrganizationIdJD\", response.organizationId);",
											"pm.environment.set(\"workforceJD\", response.organizationId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationsaJD\", authorization)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokensaJD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdsaJD}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"jdowler@workforcesoftware.com\",\n    \"organizationUniqueName\": \"workforce\",\n    \"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks Reviewer",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUsersaJD}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokensaJD}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=reviewer",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"scheduled"
									],
									"query": [
										{
											"key": "participantRole",
											"value": "reviewer"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "StoreAdmin 2319",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIdadmin2319\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenadmin2319\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"storeadmin@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenadmin2319\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseradmin2319\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationadmin2319\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenadmin2319}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"storeadmin@2319\",\n   \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Privilege",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"broadcaster\": true,\n  \"broadcastGatekeeper\": false,\n  \"taskCreator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/privileges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"organizations",
										":organizationId",
										"users",
										":userId",
										"privileges"
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "{{workforce}}"
										},
										{
											"key": "userId",
											"value": "86ffaa3a-40f9-4da4-9161-0865bf128ff4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUsersa}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokensa}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/users/:userId/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"users",
										":userId",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{principalUseruser2319f}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks ASSIGNED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/assigned",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"assigned"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks REVIEWING",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/reviewing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"reviewing"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks ARCHIVED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/reviewing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"reviewing"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks Creator",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=creator",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"scheduled"
									],
									"query": [
										{
											"key": "participantRole",
											"value": "creator"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks Assignee",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=assignee",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"scheduled"
									],
									"query": [
										{
											"key": "participantRole",
											"value": "assignee"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tasks Reviewer",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=reviewer",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"scheduled"
									],
									"query": [
										{
											"key": "participantRole",
											"value": "reviewer"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIdadmin\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenadmin\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"qaadmin@workforcesoftware.com\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenadmin\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseradmin\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationadmin\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenadmin}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIdadmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"qaadmin@workforcesoftware.com\",\n   \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"qauser@workforcesoftware.com\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"qauser@workforcesoftware.com\",\n   \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Store2319 User 1",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser2319\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser2319\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"store1@2319\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser2319\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser2319\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser2319\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser2319}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"store1@2319\",\n   \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "WorkFlows",
			"item": [
				{
					"name": "Search Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"RoleIdAwfx0\", jsonData.roles[0].id);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"roles\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 0,\n    \"offset\": 0,\n    \"searchValue\": \"Employees\",\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"name\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User-Lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"userList0\", jsonData.userLists[0].id);",
									"postman.setEnvironmentVariable(\"userList1\", jsonData.userLists[1].id);",
									"postman.setEnvironmentVariable(\"userList2\", jsonData.userLists[2].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 20,\n    \"offset\": 0,\n    \"searchValue\": \"2319\",\n    \"includeTotal\": true,\n    \"sortBy\": {\n        \"propertyName\": \"name\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/user-list/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"user-list",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"places\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PlaceIdA\", jsonData.places[0].id);",
									"postman.setEnvironmentVariable(\"PlaceIdB\", jsonData.places[1].id);",
									"postman.setEnvironmentVariable(\"PlaceIdC\", jsonData.places[2].id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PlaceTypeIdA\", jsonData.places[0].placeType.id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"ParentPlaceTypeIdA\", jsonData.places[0].parentPlace.id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"locationId\", jsonData.places[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 15,\n  \"searchValue\": \"\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"userCount\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Places Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"places\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PlaceId2319\", jsonData.places[0].id);",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PlaceTypeIdA\", jsonData.places[0].placeType.id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"ParentPlaceTypeIdA\", jsonData.places[0].parentPlace.id);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"locationId\", jsonData.places[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"2319\",\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"userCount\",\n    \"order\": \"DESC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Place Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"2319-Store-Place-1\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"ParentPlaceTypeIdA\", jsonData.placeTypes[0].parentPlace.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"2319\",\n  \"includeTotal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/place-types/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"place-types",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Role Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//pm.test(\"Body matches string\", function () {",
									"//    pm.expect(pm.response.text()).to.include(\"users\");",
									"//});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 20,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/roles/:roleId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"roles",
								":roleId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "roleId",
									"value": "{{RoleIdAwfx0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Place Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"limit\": 0,\n    \"offset\": 0,\n    \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "placeId",
									"value": "{{PlaceIdA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Parent Place Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseradmin}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenadmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"searchValue\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/places/:placeId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"places",
								":placeId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "placeId",
									"value": "{{PlaceIdA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search workflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"workflowId0x\", jsonData.workflows[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUsersa}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokensa}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"2319-al\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/workflows/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUsersa}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokensa}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/workflows/:workflowId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"workflows",
								":workflowId"
							],
							"variable": [
								{
									"key": "workflowId",
									"value": "{{workflowId0x}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search 2319 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"StoreU0\", jsonData.users[0].id);",
									"postman.setEnvironmentVariable(\"StoreU1\", jsonData.users[1].id);",
									"postman.setEnvironmentVariable(\"StoreU2\", jsonData.users[2].id);",
									"postman.setEnvironmentVariable(\"StoreU3\", jsonData.users[3].id);",
									"postman.setEnvironmentVariable(\"StoreU4\", jsonData.users[4].id);",
									"postman.setEnvironmentVariable(\"StoreU5\", jsonData.users[5].id);",
									"postman.setEnvironmentVariable(\"StoreU6\", jsonData.users[6].id);",
									"postman.setEnvironmentVariable(\"StoreU6\", jsonData.users[7].id);",
									"//postman.setEnvironmentVariable(\"StoreU7\", jsonData.users[8].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUsersa}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokensa}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"limit\": 0,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"searchValue\": \"2319\",\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  },\n  \"includeAvatars\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								"search"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create task & publish",
			"item": [
				{
					"name": "1. New Task",
					"item": [
						{
							"name": "1. Create task add Items",
							"item": [
								{
									"name": "Create Task Error Title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"title\\\"\\]\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}}Store 2319 {{$isoTimestamp}} Store 2319 {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Task Error Description",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"descriptionStripped\\\"\\]\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}} Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Task",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskIdsingle\", response.id);",
													"pm.environment.set(\"taskTitle\", request.title);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Text Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem0\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"11 text order 1 {{$randomBsAdjective}}\",\n        \"order\": 10,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Image Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem1\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"image\",\n    \"item\": {\n        \"title\": \"2 image order 2 {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Numeric Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem2\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"Add a number like 33\",\n        \"order\": 1,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Action Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem3\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"action\",\n    \"item\": {\n        \"title\": \"action jackson\",\n        \"order\": 1,\n        \"optional\": false\n    }\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Attachment Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem4\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"attachment\",\n    \"item\": {\n        \"title\": \"Attachemnet {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Poll Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem5\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"poll\",\n    \"item\": {\n        \"title\": \"Poll Title\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 15,\n        \"multiSelect\": false,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem1\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll Question 1 Character Counter - Character Count Tool is a free character counter tool that provides instant character count & word count statistics for a given text. This tool reports the number of character with spaces and without spaces, also the number of words and sentences... Character Count Tool - Character Counter monitors and reports the character counts & word counts of the text that you type in real time. Thus it is suitable for writing text with word/ character limit. The word/ character limit happens in many occasions. For example: Twitter: 280, SMS: 160, Reddit Title: 300, Ebay Title: 80, Yelp Post: 5000, LinkedIn Summary: 2000, Pinterest Description: 500, Blogspot description: 500, Facebook status: 63,206, title tag in HTML: only display 70 characters, meta descriptions in HTML: have no limitation but only first 155 characters are displayed in Google search results. This character counter software works in any web browsers such as Chrome, Firefox\",\n  \"hexColor\": \"#3D7961\",\n  \"order\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem2\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll Question 2\",\n  \"hexColor\": \"#C03636\",\n  \"order\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem3\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll QUESTION 3\",\n  \"hexColor\": \"#F6D171\",\n  \"order\": 3\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Task Template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskTemplateId0\", response.id);",
													"//pm.environment.set(\"taskTemplateName\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Private Task Template {{$randomAbbreviation}}\",\n  \"description\": \"task description e2e created - can be deleted\",\n  \"isPrivate\": true,\n  \"taskId\": \"{{taskIdsingle}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/task-templates",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"task-templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Task Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Private Task Template\");",
													"});",
													"",
													"// Check for existing variable in response",
													"//Get the variable value",
													"//var testVar= pm.environment.get(\"taskTemplateId\");",
													"",
													"//Validate whether entire response value as a text contains the variable value. ",
													"//pm.test(\"Validate if response contains variable.\", function () {",
													"//     pm.expect(pm.response.text()).to.include(testVar);",
													"//});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"partialTitle\": \"private\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/task-templates/search",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"task-templates",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update task Numeric Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast v ]] the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast v v the number of the beast v v v the number of the beast the number of the beast the number of the beast the number of the beast the number of the beastthe number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast the number of the beast\",\n        \"order\": 1\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem2}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Task from Template",
							"item": [
								{
									"name": "Create Task From Template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskIdTemplate1\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId/create-task",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"task-templates",
												":taskTemplateId",
												"create-task"
											],
											"variable": [
												{
													"key": "taskTemplateId",
													"value": "{{taskTemplateId0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"Added to template Postion 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdTemplate1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Text Item Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"Added to template Postion 1 {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdTemplate1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"    pm.expect(pm.response.text()).to.include(\"Added to template Postion 1\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdTemplate1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "1.b Reminders",
							"item": [
								{
									"name": "Create Reminder +5min all | after start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId0\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"after_start\",\n  \"recipients\": \"all_assignees\",\n  \"reminderText\": \"REMINDER DUDES +25 Min after_start/all_assignees\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reminder +5min all | before archive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId1\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_assignees\",\n  \"reminderText\": \"REMINDER DUDES +25 Min before_archive/all_assignees\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reminder +5min in progress | before archive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId2\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"in_progress\",\n  \"reminderText\": \"REMINDER DUDES +25 Min before_archive/in progress\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reminder +5min not started | before archive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId3\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"not_started\",\n  \"reminderText\": \"REMINDER DUDES +25 Min before_archive/not_started\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reminder +5min all incomplete | before archive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId4\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_incomplete\",\n  \"reminderText\": \"REMINDER DUDES +25 Min before_archive/all_incomplete\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reminder +5min all reviewers | before archive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId5\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_reviewers\",\n  \"reminderText\": \"25 temp text to be updated\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Reminder +5min all reviewers | before archive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_reviewers\",\n  \"reminderText\": \"REMINDER EDIT +25 Min before_archive/all_incomplete\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/:reminderId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders",
												":reminderId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "reminderId",
													"value": "{{reminderId5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reminder +5min all reviewers | before archive 2Bdeleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"const response = pm.response.json();",
													"pm.environment.set(\"reminderId6\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"timeValue\": 25,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_reviewers\",\n  \"reminderText\": \"25 temp text to be DELETED\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Reminder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reminderIds\": [\n        \"{{reminderId6}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/delete",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders",
												"delete"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET task reminders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"reminders"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. Publish Workflow",
							"item": [
								{
									"name": "Add Participants via Workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowId\": \"{{workflowId0x}}\",\n    \"globalObservers\": {\n        \"userIds\": [\n            \"{{StoreU6}}\"\n        ]\n    },\n    \"isGroupCompletionEnabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"globalObservers\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"isGroupCompletionEnabled\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "items",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Participants via Workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowId\": \"{{workflowId0x}}\",\n    \"globalObservers\": {\n        \"userIds\": [\n            \"{{StoreU6}}\"\n        ]\n    },\n    \"allAssignmentPlaces\": false,\n    \"assignmentPlaces\": [\n        {\n            \"placeId\": \"{{PlaceIdA}}\",\n            \"allPlaceChildren\": true\n        },\n                {\n            \"placeId\": \"{{PlaceIdB}}\",\n            \"allPlaceChildren\": true\n        },\n                {\n            \"placeId\": \"{{PlaceIdC}}\",\n            \"allPlaceChildren\": true\n        }\n    ],\n    \"isGroupCompletionEnabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"globalObservers\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"isGroupCompletionEnabled\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "items",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"//var today = new Date();",
													"//var priorDate = new Date(new Date().setDate(today.getDate() + 30));",
													"",
													"//console.log(today)",
													"//console.log(priorDate);",
													"//pm.environment.set(\"30DayArchive\", today);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var time = new Date();",
													"time.setHours(time.getHours()+1);",
													"var timeVisible = time.toISOString();",
													"pm.globals.set(\"timeVisible\", timeVisible)",
													"",
													"var time = new Date();",
													"time.setHours(time.getHours()+2);",
													"var timeSched = time.toISOString();",
													"pm.globals.set(\"timeSched\", timeSched)",
													"",
													"var time = new Date();",
													"time.setHours(time.getHours()+5);",
													"var timeDue = time.toISOString();",
													"pm.globals.set(\"timeDue\", timeDue)",
													"",
													"var time = new Date();",
													"time.setHours(time.getHours()+6);",
													"var timeArchive = time.toISOString();",
													"//console.log('24 hours added:' + timeArchive);",
													"pm.globals.set(\"timeArchive\", timeArchive)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 DRAFT {{$isoTimestamp}}\",\n    \"description\": \"E2E STOREb 1 Task Test, created as SuperAdmin run through e2e {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": null,\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": true\n    },\n    \"submit\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Question 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Poll answer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll QUESTION 3 updated 1\",\n  \"hexColor\": \"#5F3AAD\",\n  \"order\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options/:pollOptionId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options",
												":pollOptionId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												},
												{
													"key": "pollOptionId",
													"value": "{{pollItem3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task DATE ERRORS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_DUE_DATE\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_START_DATE\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"E2E Task Test superuser e2e {{$randomCatchPhrase}}\",\n    \"description\": \"E2E STOREb 1 Task Test, created as SuperAdmin run through e2e {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": \"2020-12-12T12:15:00\",\n        \"startDate\": \"2020-12-12T12:05:00\",\n        \"dueDate\": \"2020-12-12T12:35:00\",\n        \"archiveDate\": null,\n        \"enforceDueDate\": true\n    },\n    \"submit\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 Publish Workflow Place 1 assignments with Global User {{$isoTimestamp}}\",\n    \"description\": \"UNSCHEDULED FUTURE E2E STORE 1 Task Test, created as SuperAdmin run through e2e with archive {$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Error check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTH_PARTICIPAN\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseruser2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenuser2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?reviewMode=false",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "reviewMode",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Participants via Workflow Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowId\": \"{{workflowId0x}}\",\n    \"globalObservers\": {\n        \"userIds\": [\n            \"{{StoreU6}}\"\n        ]\n    },\n    \"allAssignmentPlaces\": false,\n    \"assignmentPlaces\": [\n        {\n            \"placeId\": \"{{PlaceId2319}}\",\n            \"allPlaceChildren\": true\n        }\n    ],\n    \"isGroupCompletionEnabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 Publish Workflow Place 2 assignments with Global User {{$isoTimestamp}}\",\n    \"description\": \"UNSCHEDULED FUTURE E2E STORE 1 Task Test, created as SuperAdmin run through e2e with archive {$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3. Publish Ad Hoc",
							"item": [
								{
									"name": "Add Participants via AdHoc error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"CANNOT_ADD_GLOBAL_OBSERVERS_TO_ADHOC\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assignees\": {\n        \"userIds\": [\n            \"{{StoreU0}}\",\n            \"{{StoreU1}}\",\n            \"{{StoreU2}}\",\n            \"{{StoreU3}}\"\n        ],\n        \"userListIds\": [\n            \"{{userList2}}\"\n        ]\n    },\n    \"reviewers\": {\n        \"userIds\": [\n            \"{{StoreU3}}\"\n        ],\n        \"userListIds\": [\n            \"{{userList1}}\"\n        ]\n    },\n    \"observers\": {\n        \"userIds\": [\n            \"{{StoreU3}}\"\n        ],\n\n    \"userListIds\": [\n        \"{{userList0}}\"\n    ]\n},\n\"globalObservers\": {\n    \"userIds\": [\n        \"{{StoreU0}}\"\n    ]\n},\n\"isGroupCompletionEnabled\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Participants via AdHoc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assignees\": {\n        \"userIds\": [\"{{principalUseradmin2319}}\"],\n        \"userListIds\": [\n            \"{{userList2}}\"\n        ]\n    },\n    \"reviewers\": {\n        \"userIds\": [\"{{principalUseradmin2319}}\"],\n        \"userListIds\": [\n            \"{{userList1}}\"\n        ]\n    },\n    \"observers\": {\n        \"userIds\": [\"{{principalUseradmin2319}}\"],\n        \"userListIds\": [\n            \"{{userList0}}\"\n        ]\n    },\n    \"isGroupCompletionEnabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"AdHoc Store 2319 Publish AdHoc 1{{$isoTimestamp}}\",\n    \"description\": \"UNNSCHEDULED FUTURE E2E STORE 1 Task Test, created as SuperAdmin run through e2e with archive date {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Review Stats 5 Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":1\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"review-stats"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Reviewing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/reviewing?limit=20&offset=0",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												"reviewing"
											],
											"query": [
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Question 2\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"isGroupCompletionEnabled\\\"\\:true\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Ad Hoc Update add reviewers observers",
							"item": [
								{
									"name": "Add Participants via AdHoc add user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assignees\": {\n        \"userIds\": [\n            \"{{StoreU0}}\",\n            \"{{StoreU1}}\",\n            \"{{StoreU2}}\",\n            \"{{StoreU3}}\",\n            \"{{StoreU4}}\",\n            \"{{StoreU5}}\"\n        ]\n    },\n    \"reviewers\": {\n        \"userIds\": [\n            \"{{StoreU6}}\",\n            \"{{principalUseradmin2319}}\",\n            \"{{principalUsersaJD}}\"\n        ]\n    },\n    \"observers\": {\n        \"userIds\": [\n            \"{{StoreU6}}\",\"86ffaa3a-40f9-4da4-9161-0865bf128ff4\"\n        ]\n    },\n    \"isGroupCompletionEnabled\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Question 2\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"isGroupCompletionEnabled\\\"\\:false\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task 6 users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 Publish AdHoc 2 {{$isoTimestamp}}\",\n    \"description\": \"jDxxx UNNSCHEDULED FUTURE E2E STORE 1 Task Test, created as SuperAdmin run through e2e with archive date {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Reviewing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUsersaJD}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokensaJD}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/reviewing?limit=20&offset=0",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												"reviewing"
											],
											"query": [
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Review Stats 6 Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":6\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"review-stats"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tasks Scheduled Reviewer 2319 Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=reviewer",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												"scheduled"
											],
											"query": [
												{
													"key": "participantRole",
													"value": "reviewer"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5. Publish Workflow",
							"item": [
								{
									"name": "Add Participants via Workflow 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"workflowId\": \"{{workflowId0x}}\",\n    \"globalObservers\": {\n        \"userIds\": [\n            \"{{StoreU6}}\"\n\n        ]\n    },\n    \"isGroupCompletionEnabled\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish Task 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 Published workflow 2nd archive date ; {{timeArchive}}\",\n    \"description\": \"SCHEDULED 5 Day Archive STORE 1 Task Test, created as StoreAdmin run through e2e Global user{{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": null,\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Question 2\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"isGroupCompletionEnabled\\\"\\:false\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Review Stats 5 Users Workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":10\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"review-stats"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Badges",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"channels\");",
													"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
													"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
													"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
													"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
													"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
													"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"type": "text",
												"value": "{{principalUseradmin2319}}"
											},
											{
												"key": "access-token",
												"type": "text",
												"value": "{{accessTokenadmin2319}}"
											},
											{
												"key": "Authorization",
												"value": "{{workforceudAuthorizationadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"organizations",
												":organizationId",
												"users",
												":userId",
												"badges"
											],
											"query": [
												{
													"key": "dms",
													"value": "false"
												},
												{
													"key": "channels",
													"value": "true"
												},
												{
													"key": "tasks",
													"value": "true"
												},
												{
													"key": "communityId",
													"value": "{{workforceudQAOrgId}}"
												},
												{
													"key": "newTasks",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organizationId",
													"value": "{{workforce}}"
												},
												{
													"key": "userId",
													"value": "{{principalUseradmin2319}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Review Stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":10\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"review-stats"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User store1",
					"item": [
						{
							"name": "Get Assigned tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/assigned?limit=90&offset=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"assigned"
									],
									"query": [
										{
											"key": "limit",
											"value": "90"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reviewing tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/reviewing?limit=90&offset=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"reviewing"
									],
									"query": [
										{
											"key": "limit",
											"value": "90"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Archived tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"assignee\\\"\\:true\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/archived?limit=90&offset=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"archived"
									],
									"query": [
										{
											"key": "limit",
											"value": "90"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId?reviewMode=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"query": [
										{
											"key": "reviewMode",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Id Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"total\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"assignmentIdA0\", response.assignments[0].assignmentId);",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not_started\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Assignment Items UserStore1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not_started\");",
											"});",
											"",
											"//var jsonData = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments",
										":assignmentId"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										},
										{
											"key": "assignmentId",
											"value": "{{assignmentIdA0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Task Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\",\n            \"note\":\"Text note on item\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"note\":\"Text note on item\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"note\":\"Text note on item\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"note\":\"Text note on item\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"note\":\"Text note on item\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"note\":\"Text note on item\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666,\n            \"note\":\"Text note on item\"\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true,\n            \"note\":\"Text note on item\"\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"note\":\"Text note on item\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"note\":\"Text note on item\",\n            \"result\": [\n                \"{{pollItem1}}\"\n            ]\n        }\n    ],\n    \"submit\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments",
										":assignmentId",
										"results"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										},
										{
											"key": "assignmentId",
											"value": "{{assignmentIdA0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Task Submit Errors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_TASK_ITEM_RESULT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\"\n            ]\n        }\n    ],\n    \"submit\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments",
										":assignmentId",
										"results"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										},
										{
											"key": "assignmentId",
											"value": "{{assignmentIdA0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Task Submit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\",\n            \"note\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\"\n            ]\n        }\n    ],\n    \"submit\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments",
										":assignmentId",
										"results"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										},
										{
											"key": "assignmentId",
											"value": "{{assignmentIdA0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Scheduled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUsersa}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokensa}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=creator",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"scheduled"
									],
									"query": [
										{
											"key": "participantRole",
											"value": "creator"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"participants\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId?pending=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"query": [
										{
											"key": "pending",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"en-us\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/users/languages",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"users",
										"languages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Badges",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"channels\");",
											"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
											"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
											"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
											"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
											"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
											"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"type": "text",
										"value": "{{principalUseruser2319}}"
									},
									{
										"key": "access-token",
										"type": "text",
										"value": "{{accessTokenuser2319}}"
									},
									{
										"key": "Authorization",
										"value": "{{workforceudAuthorizationuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"organizations",
										":organizationId",
										"users",
										":userId",
										"badges"
									],
									"query": [
										{
											"key": "dms",
											"value": "false"
										},
										{
											"key": "channels",
											"value": "true"
										},
										{
											"key": "tasks",
											"value": "true"
										},
										{
											"key": "communityId",
											"value": "{{workforceudQAOrgId}}"
										},
										{
											"key": "newTasks",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "{{workforce}}"
										},
										{
											"key": "userId",
											"value": "{{principalUseruser2319}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review Stats 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":1\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":0\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":9\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskid",
										"review-stats"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskIdsingle}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Update Task",
					"item": [
						{
							"name": "1. Update Items 1",
							"item": [
								{
									"name": "Update task Text Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"Updated text item - {{$randomBsAdjective}}\",\n        \"order\": 10,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Image Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"image\",\n    \"item\": {\n        \"title\": \"Image Item Updated - {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Numeric Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"Updated Numeric Item - {{$randomAdjective}}\",\n        \"order\": 1,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Action Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"action\",\n    \"item\": {\n        \"title\": \"updated Action Item - {{$randomBsBuzz}}\",\n        \"order\": 1,\n        \"optional\": true\n    }\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Attachment Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"attachment\",\n    \"item\": {\n        \"title\": \"Updated Attachemnet Item - {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem4}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Poll Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"poll\",\n    \"item\": {\n        \"title\": \"Poll Title\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 15,\n        \"multiSelect\": true,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Poll Answer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//pm.test(\"Body matches string\", function () {",
													"//    pm.expect(pm.response.text()).to.include(\"\\\"hexColor\\\":\\\"#444444\\\"\");",
													"//});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll QUESTION 3 updated post publish again\",\n  \"hexColor\": \"#5F3AAD\",\n  \"order\": 4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options/:pollOptionId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options",
												":pollOptionId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												},
												{
													"key": "pollOptionId",
													"value": "{{pollItem3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem4\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll QUESTION 4 Post Publish\",\n  \"hexColor\": \"#3E86DB\",\n  \"order\": 4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem5\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll QUESTION 5 Post Publish\",\n  \"hexColor\": \"#EF318C\",\n  \"order\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Re-Publish Task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 Published workflow 2nd archive date ; {{timeArchive}}\",\n    \"description\": \"SCHEDULED 5 Day Archive STORE 1 Task Test, created as StoreAdmin run through e2e Global user{{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": null,\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"hexColor\\\":\\\"#3D7961\\\"\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"enforceDueDate\\\":false\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll QUESTION 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "items",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin falses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?includeItems=false&editMode=false",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "includeItems",
													"value": "false"
												},
												{
													"key": "editMode",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. Update Items 2",
							"item": [
								{
									"name": "delete poll item",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options/:pollOptionId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options",
												":pollOptionId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5}}"
												},
												{
													"key": "pollOptionId",
													"value": "{{pollItem4}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Poll Item 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem6\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"poll\",\n    \"item\": {\n        \"title\": \"Poll Task Item 2\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 15,\n        \"multiSelect\": false,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 1b",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem1b\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll Question 2\",\n  \"hexColor\": \"#EF318C\",\n  \"order\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem6}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 2b",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem2b\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll Question 2b\",\n  \"hexColor\": \"#EF318C\",\n  \"order\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem6}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Text Item B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem0b\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"text item B {{$randomBsAdjective}}\",\n        \"order\": 10,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Image Item B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem1b\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"image\",\n    \"item\": {\n        \"title\": \"Image item B {{$randomBsAdjective}}\",\n        \"order\": 11,\n        \"min\": 5,\n        \"max\": 25,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Numeric Item B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem2b\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"Numeric B\",\n        \"order\": 1,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Action Item B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem3b\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"action\",\n    \"item\": {\n        \"title\": \"Action Item B\",\n        \"order\": 1,\n        \"optional\": true\n    }\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Attachment Item B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem4b\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"attachment\",\n    \"item\": {\n        \"title\": \"Attachemnet {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Re-Publish Task Final",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"EVIL ONE - {{$isoTimestamp}} REMINDERS-Store 2319 Published Edited Final + REMINDERS *| WORKFLOW |* {{timeArchive}}\",\n    \"description\": \"{{timeVisible}} | {{timeSched}} | {{timeDue}} | {{timeArchive}} Updated  run through e2e with archive date {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": null,\n        \"enforceDueDate\": true\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingle}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get task Admin added items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"query": [
								{
									"key": "items",
									"value": "true"
								},
								{
									"key": "editMode",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items StoreUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"in_progress\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":0\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":1\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":9\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskid",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskid",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Id Assignments Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Updated Reminders",
			"item": [
				{
					"name": "Create Reminder +5min all | after start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"reminderId7\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timeValue\": 5,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"after_start\",\n  \"recipients\": \"all_assignees\",\n  \"reminderText\": \"REMINDER **NEW DELETED** +1 day after_start/all_assignees\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Reminder Post Publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reminderIds\": [\n        \"{{reminderId7}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"delete"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reminder +5min all reviewers | before archive Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timeValue\": 5,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_assignees\",\n  \"reminderText\": \"REMINDER **UPDATED** +5 Min before_archive/all_assignees MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/:reminderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								":reminderId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "reminderId",
									"value": "{{reminderId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reminder +5min all reviewers | before archive Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timeValue\": 5,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"in_progress\",\n  \"reminderText\": \"REMINDER **UPDATED** +5 Min before_archive/in progress\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/:reminderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								":reminderId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "reminderId",
									"value": "{{reminderId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reminder +5min all reviewers | before archive Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timeValue\": 5,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"not_started\",\n  \"reminderText\": \"REMINDER **UPDATED** +5 Min before_archive/not_started\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/:reminderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								":reminderId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "reminderId",
									"value": "{{reminderId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reminder +5min all reviewers | before archive Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timeValue\": 5,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_incomplete\",\n  \"reminderText\": \"REMINDER **UPDATED** +5 Min before_archive/all_incomplete\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/:reminderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								":reminderId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "reminderId",
									"value": "{{reminderId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reminder +5min all reviewers | before archive Copy 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timeValue\": 5,\n  \"timeUnit\": \"minutes\",\n  \"dateType\": \"before_archive\",\n  \"recipients\": \"all_reviewers\",\n  \"reminderText\": \"REMINDER **UPDATED** +5min before archive all reviewers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/:reminderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								":reminderId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "reminderId",
									"value": "{{reminderId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Re-Publish Task after edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var time = new Date();",
									"time.setHours(time.getHours()+5);",
									"var timeArchive = time.toISOString();",
									"//console.log('24 hours added:' + timeArchive);",
									"pm.globals.set(\"timeArchive\", timeArchive)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"AM I EVIL WHISKY {{$isoTimestamp}} REMINDERS-Store 2319 Published Edited Final + REMINDERS *| WORKFLOW |* {{timeArchive}}\",\n    \"description\": \"{{timeVisible}} | {{timeSched}} | {{timeDue}} | {{timeArchive}} Updated  run through e2e with archive date {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": true\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET task reminders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store2",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319b\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319b\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"store2@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319b\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319b\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationuser2319b\", authorization)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319b}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"store2@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdB\", response.assignments[0].assignmentId);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"taskTime\", response.taskUpdatedAt);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\",\n                \"{{pollItem2}}\",\n                \"{{pollItem5}}\"\n            ]\n    },        {\n            \"itemId\": \"{{taskItem6}}\",\n            \"result\": [\n                \"{{pollItem1b}}\"\n            ]\n    }\n],\n\"submit\": true,\n\"taskUpdatedAt\": \"{{taskTime}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task Results",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items Completed Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"in_progress\");",
									"});",
									"",
									"//const response = pm.response.json();",
									"//pm.environment.set(\"taskTime\", response.taskUpdatedAt);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Re-Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"RESAVE - text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f666\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\",\n                \"{{pollItem2}}\",\n                \"{{pollItem5}}\"\n            ]\n    },        {\n            \"itemId\": \"{{taskItem6}}\",\n            \"result\": [\n                \"{{pollItem1b}}\"\n            ]\n    }\n],\n\"submit\": true,\n\"taskUpdatedAt\": \"{{taskTime}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task Permissions Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\",\n                \"{{pollItem2}}\",\n                \"{{pollItem5}}\"\n            ]\n    },        {\n            \"itemId\": \"{{taskItem6}}\",\n            \"result\": [\n                \"{{pollItem1b}}\"\n            ]\n    }\n],\n\"submit\": true,\n\"taskUpdatedAt\": \"{{taskTime}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"completed\");",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"imageElementId0\", response.items[8].result[0].imageElementId);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"Task Comment 505 ***** ADMIN COMMENT *******\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin userlist mention",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"hello 2319 team members <mention mention-type=\\\"userlist\\\" reference-id=\\\"26d6b361-9802-4b84-858e-fc0d7d3cb052\\\"/> <mention mention-type=\\\"userlist\\\" reference-id=\\\"2ce852c0-c3eb-4e97-bb97-2a66d11f29d5\\\"/> jello!\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin user mentions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId0\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"EDIT Task Comment 505 ***** ADMIN COMMENT ******* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId1\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"JELLOZ 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Edit Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"EDIT Task Comment 505 ***** ADMIN COMMENT ******* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Edit Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment User2 Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTH_PARTICIPANT\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"Task Comment 505 ***** USER 2 *******\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin b",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin c",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment U2 Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId1\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin ON Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId1\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"MENTIONS 2319 users <mention mention-type=\\\"user\\\" reference-id=\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"996a66a8-92c8-4e30-bce5-1dd2f38ea2ad\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"fcbe80fb-9f44-4fda-84ff-33f4cb48694b\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"35c26b6e-421e-495f-9931-dbddaa3a4b5a\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"4e362ccc-bded-4c80-bbee-1ce71d6075a0\\\"/> and <mention mention-type=\\\"user\\\" reference-id=\\\"971030bc-804c-4f7a-aaba-ccc5fdf6ff8f\\\"/>\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/images/:imageElementId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"images",
								":imageElementId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "imageElementId",
									"value": "{{imageElementId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE Tassk Comment ON Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"IMAGE Comment 666 ***** ADMIN COMMENT ******* UPDATED {{$randomAdjective}}\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/images/:imageElementId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"images",
								":imageElementId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "imageElementId",
									"value": "{{imageElementId0}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS ON Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//const response = pm.response.json();",
									"//pm.environment.set(\"contentId0\", response.contents[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/images/:imageElementId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"images",
								":imageElementId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "imageElementId",
									"value": "{{imageElementId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE COMMENTS ON Image Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//const response = pm.response.json();",
									"//pm.environment.set(\"contentId0\", response.contents[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/images/:imageElementId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"images",
								":imageElementId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "imageElementId",
									"value": "{{imageElementId0}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin ON Image 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId1\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"IMAGE Comment 666 ***** ADMIN COMMENT ******* {{$randomAdjective}}\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/images/:imageElementId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"images",
								":imageElementId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "imageElementId",
									"value": "{{imageElementId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS ON Image 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"contents\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/images/:imageElementId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"images",
								":imageElementId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "imageElementId",
									"value": "{{imageElementId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"imageElementId0\", jsonData.items[0].imageElementId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"USER_NOT_AUTH_PARTICIPANT\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items Completed Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"resultCommentCount\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdB}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319b}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319b}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								},
								{
									"key": "newTasks",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Assignee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/assigned?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"assigned"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Reviewer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/reviewing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"reviewing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Archived",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"archiveDate\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/archived",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"archived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks scheduled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319b}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319b}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/scheduled?participantRole=assignee",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"scheduled"
							],
							"query": [
								{
									"key": "participantRole",
									"value": "assignee"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":1\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":1\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":8\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskid",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskid",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store3",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319c\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319c\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"store3@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319c\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319c\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationuser2319c\", authorization)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319c}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"store3@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdC\", response.assignments[0].assignmentId);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"totalItems\\\"\\:12\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem2}}\"\n            ]\n    }\n],\n\"submit\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Admin image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId2\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"task comment image\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Edit Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"EDIT Task Comment 505 ***** ADMIN COMMENT ******* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments/:contentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments",
								":contentId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								},
								{
									"key": "contentId",
									"value": "{{contentId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tassk Comment user image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.environment.set(\"contentId3\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"task comment image as user {{$randomBsBuzz}}\",\n    \"documentIds\": [\n        \"63864fceecbe800011dc2dbc\"\n    ],\n    \"fileIds\": [\n        \"63864f90ecbe800011dc2dba\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task COMMENTS user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId:/assignments/:assignmentId/items/:itemId/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId:",
								"assignments",
								":assignmentId",
								"items",
								":itemId",
								"comments"
							],
							"variable": [
								{
									"key": "taskId:",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdC}}"
								},
								{
									"key": "itemId",
									"value": "{{taskItem1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319c}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319c}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								},
								{
									"key": "newTasks",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319c}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Reviewer",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/reviewing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"reviewing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Assignee",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/assigned",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"assigned"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Creator",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319c}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319c}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/archived",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"archived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":2\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":1\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":7\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskid",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskid",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store4",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319d\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319d\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319d}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"store4@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319d\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319d\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationuser2319d\", authorization)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319d}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319d}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"store4@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdD\", response.assignments[0].assignmentId);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319d}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319d}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"totalItems\\\"\\:12\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319d}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319d}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdD}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319d}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319d}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem1}}\"\n            ]\n    }\n],\n\"submit\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdD}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319d}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319d}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationuser2319d}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								},
								{
									"key": "newTasks",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319d}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Assigned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319d}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319d}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/assigned",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"assigned"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Reviewing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319d}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319d}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/reviewing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"reviewing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Archived",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tasks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319d}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319d}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/archived",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"archived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":3\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":1\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":6\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskid",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskid",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store5",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319e\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319e\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319e}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"store5@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319e\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319e\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationuser2319e\", authorization)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319e}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319e}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"store5@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"total\");",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"assignmentIdE\", response.assignments[0].assignmentId);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319e}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319e}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not_started\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319e}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319e}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdE}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319e}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319e}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0}}\",\n            \"result\": \"text 1 whatever {{$randomBsAdjective}}\"\n        },\n        {\n            \"itemId\": \"{{taskItem1}}\",\n            \"result\": [\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                },\n                {\n                    \"fileId\": \"6363ecdaec7e7a687541f5a8\",\n                    \"imageElementId\": \"{{$guid}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem2}}\",\n            \"result\": 666\n        },\n        {\n            \"itemId\": \"{{taskItem3}}\",\n            \"result\": true\n        },\n        {\n            \"itemId\": \"{{taskItem4}}\",\n            \"result\": [\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFilePath}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                },\n                {\n                    \"documentId\": \"{{$randomFileName}}\"\n                }\n            ]\n        },\n        {\n            \"itemId\": \"{{taskItem5}}\",\n            \"result\": [\n                \"{{pollItem3}}\"\n            ]\n    }\n],\n\"submit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId",
								"results"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdE}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319e}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319e}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationuser2319e}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								},
								{
									"key": "newTasks",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319e}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Review Stats 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":3\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":2\");",
									"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":5\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskid",
								"review-stats"
							],
							"variable": [
								{
									"key": "taskid",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User store6 Global observer",
			"item": [
				{
					"name": "installations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"clientIduser2319f\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/installations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"installations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - AuthMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const loginToken = postman.getResponseHeader(\"login-token\");",
									"pm.environment.set(\"loginTokenuser2319f\", loginToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319f}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"username\" : \"store6@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authmethod",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authmethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const accessToken = postman.getResponseHeader(\"access-token\");",
									"pm.environment.set(\"accessTokenuser2319f\", accessToken);",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"principalUseruser2319f\", response.userId);",
									"",
									"const authorization = postman.getResponseHeader(\"Authorization\");",
									"pm.environment.set(\"workforceudAuthorizationuser2319f\", authorization)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "login-token",
								"value": "{{loginTokenuser2319f}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "installation-id",
								"value": "{{clientIduser2319f}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"store6@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/login/authenticate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"login",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task restricted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319f}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319f}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"StoreUser 6 Task {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Get the variable value",
									"var testVar= pm.environment.get(\"taskIdsingle\");",
									"",
									"//Validate whether entire response value as a text contains the variable value. ",
									"pm.test(\"Validate if response contains variable.\", function () {",
									"     pm.expect(pm.response.text()).to.include(testVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319f}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319f}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId?reviewMode=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"query": [
								{
									"key": "reviewMode",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Reviewing Global observer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319f}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319f}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/reviewing?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"reviewing"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Reviewing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319f}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319f}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/reviewing?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"reviewing"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Badges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"channels\");",
									"    pm.expect(pm.response.text()).to.include(\"hasNewActivity\");",
									"    pm.expect(pm.response.text()).to.include(\"hasPriorityActivity\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalInReviewTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalObservingTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNotCompletedTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"totalNeedsChangesTasks\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"newTasks\");",
									"    pm.expect(pm.response.text()).to.include(\"activeAssignments\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"type": "text",
								"value": "{{principalUseruser2319f}}"
							},
							{
								"key": "access-token",
								"type": "text",
								"value": "{{accessTokenuser2319f}}"
							},
							{
								"key": "Authorization",
								"value": "{{workforceudAuthorizationuser2319f}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/organizations/:organizationId/users/:userId/badges?dms=false&channels=true&tasks=true&communityId={{workforceudQAOrgId}}&newTasks=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"organizations",
								":organizationId",
								"users",
								":userId",
								"badges"
							],
							"query": [
								{
									"key": "dms",
									"value": "false"
								},
								{
									"key": "channels",
									"value": "true"
								},
								{
									"key": "tasks",
									"value": "true"
								},
								{
									"key": "communityId",
									"value": "{{workforceudQAOrgId}}"
								},
								{
									"key": "newTasks",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "{{workforce}}"
								},
								{
									"key": "userId",
									"value": "{{principalUseruser2319f}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Reviewing Global observer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319f}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319f}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/reviewing?limit=20&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								"reviewing"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manual Reminders",
			"item": [
				{
					"name": "Manual Reminder - not started",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": \"not_started\",\n  \"reminderText\": \"Not Started Test Manual Reminder\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/send-manual-reminder",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"send-manual-reminder"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Reminder - in progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": \"in_progress\",\n  \"reminderText\": \"In progress Test Manual Reminder\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/send-manual-reminder",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"send-manual-reminder"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Reminder - incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": \"all_incomplete\",\n  \"reminderText\": \"Incomplete Test Manual Reminder\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/send-manual-reminder",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"send-manual-reminder"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Reminder - all participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": \"all_participants\",\n  \"reminderText\": \"participants Test Manual Reminder  <hashtag hashtag-id=\\\"c65478e0-29f9-4c6c-8c13-73055b9ea033\\\"\\\"/> <hashtag hashtag-id=\\\"f0761dae-9e39-4396-bd86-ae7d2ba6359c\\\"\\\"/> SPACE <div>Hey <mention mention-type=\\\"user\\\" reference-id=\\\"{{principalUseruser2319b}}\\\"/>, <mention mention-type=\\\"user\\\" reference-id=\\\"{{principalUseruser2319}}\\\"/> do a good job\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/send-manual-reminder",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"send-manual-reminder"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Reminder - reviewers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": \"all_reviewers\",\n  \"reminderText\": \"reviewers Test Manual Reminder\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/send-manual-reminder",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"send-manual-reminder"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Reminder - Error check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"INVALID_REQUEST_DATA\\\"\\:\\[\\\"reminderText\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": \"all_participants\",\n  \"reminderText\": \"The PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops includeThe PADI Divemaster course teaches you to be a leader and take charge of dive activities. Through knowledge development sessions, waterskills exercises and workshops, and hands-on practical assessment, you develop the skills to organize and direct a variety of scuba diving activities. Topics and practical workshops include\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/reminders/send-manual-reminder",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"reminders",
								"send-manual-reminder"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create task - Basic all optional",
			"item": [
				{
					"name": "1. New Task",
					"item": [
						{
							"name": "Create Task",
							"item": [
								{
									"name": "Create Task",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskIdsingleO\", response.id);",
													"pm.environment.set(\"taskTitleO\", request.title);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Task Test {{$randomCatchPhrase}} {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Text Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem0O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"11 text order 1 {{$randomBsAdjective}}\",\n        \"order\": 10,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Image Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem1O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"image\",\n    \"item\": {\n        \"title\": \"2 image order 2 {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Numeric Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem2O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"Add a number like 33\",\n        \"order\": 1,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Action Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem3O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"action\",\n    \"item\": {\n        \"title\": \"action jackson\",\n        \"order\": 1,\n        \"optional\": true\n    }\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Attachment Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem4O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"attachment\",\n    \"item\": {\n        \"title\": \"Attachemnet {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Poll Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItem5O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"poll\",\n    \"item\": {\n        \"title\": \"Poll Title\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 15,\n        \"multiSelect\": true,\n        \"optional\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem1O\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll Question 1 Character Counter - Character Count Tool is a free character counter tool that provides instant character count & word count statistics for a given text. This tool reports the number of character with spaces and without spaces, also the number of words and sentences... Character Count Tool - Character Counter monitors and reports the character counts & word counts of the text that you type in real time. Thus it is suitable for writing text with word/ character limit. The word/ character limit happens in many occasions. For example: Twitter: 280, SMS: 160, Reddit Title: 300, Ebay Title: 80, Yelp Post: 5000, LinkedIn Summary: 2000, Pinterest Description: 500, Blogspot description: 500, Facebook status: 63,206, title tag in HTML: only display 70 characters, meta descriptions in HTML: have no limitation but only first 155 characters are displayed in Google search results. This character counter software works in any web browsers such as Chrome, Firefox\",\n  \"hexColor\": \"#3D7961\",\n  \"order\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5O}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem2O\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll Question 2\",\n  \"hexColor\": \"#C03636\",\n  \"order\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5O}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Poll answer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"pollItem3O\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Poll QUESTION 3\",\n  \"hexColor\": \"#F6D171\",\n  \"order\": 3\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items",
												":itemId",
												"poll-options"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												},
												{
													"key": "itemId",
													"value": "{{taskItem5O}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Participants via Ad Hoc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assignees\": {\n        \"userIds\": [\n            \"{{StoreU0}}\",\n            \"{{StoreU1}}\",\n            \"{{StoreU2}}\",\n            \"{{StoreU3}}\",\n            \"{{StoreU4}}\"\n        ]\n    },\n    \"reviewers\": {\n        \"userIds\": [\n            \"{{principalUseradmin2319}}\",\n            \"{{principalUsersaJD}}\"\n        ]\n    },\n    \"observers\": {\n        \"userIds\": [\n            \"{{principalUseradmin2319}}\"\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"assignees\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"observers\\\"\\:\\{\\\"userIds\\\"\\:\\[\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "items",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get task Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Poll Question 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"query": [
												{
													"key": "items",
													"value": "true"
												},
												{
													"key": "editMode",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdsingleO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Publish Task Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"TASK All Optional Items ARCHIVED {{$randomCatchPhrase}} {{$isoTimestamp}}\",\n    \"description\": \"All Optional Items {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": false,\n    \"discardChanges\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"TASK All Optional Items ARCHIVED {{$randomCatchPhrase}} {{$isoTimestamp}}\",\n    \"description\": \"All Optional Items {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review Stats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":5\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":0\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskid",
										"review-stats"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskIdsingleO}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User store1",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser2319\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser2319\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"store1@2319\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser2319\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser2319\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser2319\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser2319}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"store1@2319\",\n   \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assigned tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/assigned?limit=20&offset=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"assigned"
									],
									"query": [
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Id Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"total\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"assignmentIdA0O\", response.assignments[0].assignmentId);",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not_started\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Assignment Items UserStore1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"not_started\");",
											"});",
											"",
											"//var jsonData = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
											"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments",
										":assignmentId"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										},
										{
											"key": "assignmentId",
											"value": "{{assignmentIdA0O}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Task Submit Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"items\": [\n        {\n            \"itemId\": \"{{taskItem0O}}\",\n            \"result\": \"\",\n            \"note\":\"Lorem ipsum dolor sit amett amet\"\n        },\n        {\n            \"itemId\": \"{{taskItem3O}}\",\n            \"result\": false\n        },\n        {\n            \"itemId\": \"{{taskItem5O}}\",\n            \"result\": []\n        }\n    ],\n    \"submit\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId/results",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments",
										":assignmentId",
										"results"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										},
										{
											"key": "assignmentId",
											"value": "{{assignmentIdA0O}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Assigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"tasks\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/assigned",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										"assigned"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"schedule\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"en-us\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/users/languages",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"users",
										"languages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get task Admin added items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"result\\\"\\:null\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"query": [
								{
									"key": "items",
									"value": "true"
								},
								{
									"key": "editMode",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingleO}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Task Assignment Items StoreUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"totalItems\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"in_progress\");",
									"});",
									"",
									"//var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"taskItem0\", jsonData.items[0].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem1\", jsonData.items[1].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem2\", jsonData.items[2].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem3\", jsonData.items[3].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem4\", jsonData.items[4].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem5\", jsonData.items[5].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem6\", jsonData.items[6].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem7\", jsonData.items[7].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem8\", jsonData.items[8].itemId);",
									"//postman.setEnvironmentVariable(\"taskItem9\", jsonData.items[9].itemId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseruser2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenuser2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId/assignments/:assignmentId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId",
								"assignments",
								":assignmentId"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskIdsingleO}}"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentIdA0O}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create task - Group Assignment",
			"item": [
				{
					"name": "1. New Task",
					"item": [
						{
							"name": "Create Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskIdsingleGC\", response.id);",
											"pm.environment.set(\"taskTitleGC\", request.title);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Task Test {{$randomCatchPhrase}} {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Text Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItemGC0\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"11 text order 1 {{$randomBsAdjective}}\",\n        \"order\": 10,\n        \"optional\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"workflowIdGC\", jsonData.workflows[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"2319-ALL\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true,\n  \"sortBy\": {\n    \"propertyName\": \"name\",\n    \"order\": \"ASC\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/workflows/search",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"workflows",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Participants Workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workflowId\": \"{{workflowIdGC}}\",\n    \"globalObservers\": {\n        \"userIds\": []\n    },\n    \"isGroupCompletionEnabled\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskid",
										"participants"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Admin workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignees\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"query": [
										{
											"key": "items",
											"value": "true"
										},
										{
											"key": "editMode",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"query": [
										{
											"key": "items",
											"value": "true"
										},
										{
											"key": "editMode",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"TASK All Optional Items ARCHIVED {{$randomCatchPhrase}} {{$isoTimestamp}}\",\n    \"description\": \"All Optional Items {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review Stats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":3\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskid",
										"review-stats"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User store1",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser2319\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser2319\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"store1@2319\",\n    \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser2319\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser2319\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser2319\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser2319}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"store1@2319\",\n   \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Id Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"total\");",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"groupCompletionId\", jsonData.assignments[0].assignmentId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User store2",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser2319b\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser2319b\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319b}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"store2@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser2319b\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser2319b\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser2319b\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser2319b}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319b}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"store2@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"total\");",
											"});",
											"",
											"//Get the variable value",
											"var testVar= pm.environment.get(\"groupCompletionId\");",
											"",
											"//Validate whether entire response value as a text contains the variable value. ",
											"pm.test(\"Validate if response contains variable.\", function () {",
											"     pm.expect(pm.response.text()).to.include(testVar);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319b}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319b}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User store3",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser2319c\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser2319c\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319c}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"store3@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser2319c\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser2319c\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser2319c\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser2319c}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319c}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"store3@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"total\");",
											"});",
											"",
											"//Get the variable value",
											"var testVar= pm.environment.get(\"groupCompletionId\");",
											"",
											"//Validate whether entire response value as a text contains the variable value. ",
											"pm.test(\"Validate if response contains variable.\", function () {",
											"     pm.expect(pm.response.text()).to.include(testVar);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319c}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319c}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User store4",
					"item": [
						{
							"name": "installations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"clientIduser2319d\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientInstallationId\": \"{{$guid}}\",\n    \"apiVersion\": 17,\n    \"appId\": \"{{appId}}\",\n    \"deviceType\": \"web\",\n    \"deviceModel\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"timeZone\": \"America/Montreal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/installations",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"installations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - AuthMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const loginToken = postman.getResponseHeader(\"login-token\");",
											"pm.environment.set(\"loginTokenuser2319d\", loginToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319d}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\" : \"store4@2319\",\n   \"organizationUniqueName\": \"workforce\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authmethod",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authmethod"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const accessToken = postman.getResponseHeader(\"access-token\");",
											"pm.environment.set(\"accessTokenuser2319d\", accessToken);",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"principalUseruser2319d\", response.userId);",
											"",
											"const authorization = postman.getResponseHeader(\"Authorization\");",
											"pm.environment.set(\"workforceudAuthorizationuser2319d\", authorization)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "login-token",
										"value": "{{loginTokenuser2319d}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "installation-id",
										"value": "{{clientIduser2319d}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"store4@2319\",\n    \"organizationUniqueName\": \"workforce\",\n\t\"password\": \"Password1!\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/v1/login/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"login",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Task Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
											"});",
											"",
											"//Get the variable value",
											"var testVar= pm.environment.get(\"groupCompletionId\");",
											"",
											"//Validate whether entire response value as a text contains the variable value. ",
											"pm.test(\"Validate if response contains variable.\", function () {",
											"     pm.expect(pm.response.text()).to.include(testVar);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser2319d}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser2319d}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/assignments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"assignments"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskIdsingleGC}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create task from template",
			"item": [
				{
					"name": "0. Search templates",
					"item": [
						{
							"name": "Search Task Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskTemplateId2\", response.taskTemplates[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"partialTitle\": \"Private Task Template\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/search",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1. New Task",
					"item": [
						{
							"name": "Create Task from private Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskTemplateId2\", response.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId/create-task",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										":taskTemplateId",
										"create-task"
									],
									"variable": [
										{
											"key": "taskTemplateId",
											"value": "{{taskTemplateId0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Text Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItem0O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"11 text order 1 {{$randomBsAdjective}}\",\n        \"order\": 10,\n        \"optional\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Image Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItem1O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"image\",\n    \"item\": {\n        \"title\": \"2 image order 2 {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Numeric Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItem2O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"numeric\",\n    \"item\": {\n        \"title\": \"Add a number like 33\",\n        \"order\": 1,\n        \"optional\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Action Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItem3O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"action\",\n    \"item\": {\n        \"title\": \"action jackson\",\n        \"order\": 1,\n        \"optional\": true\n    }\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Attachment Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItem4O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"attachment\",\n    \"item\": {\n        \"title\": \"Attachemnet {{$randomBsAdjective}}\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"optional\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add task Poll Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"order\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskItem5O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"poll\",\n    \"item\": {\n        \"title\": \"Poll Title\",\n        \"order\": 1,\n        \"min\": 1,\n        \"max\": 15,\n        \"multiSelect\": true,\n        \"optional\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Poll answer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"pollItem1O\", response.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Poll Question 1 Character Counter - Character Count Tool is a free character counter tool that provides instant character count & word count statistics for a given text. This tool reports the number of character with spaces and without spaces, also the number of words and sentences... Character Count Tool - Character Counter monitors and reports the character counts & word counts of the text that you type in real time. Thus it is suitable for writing text with word/ character limit. The word/ character limit happens in many occasions. For example: Twitter: 280, SMS: 160, Reddit Title: 300, Ebay Title: 80, Yelp Post: 5000, LinkedIn Summary: 2000, Pinterest Description: 500, Blogspot description: 500, Facebook status: 63,206, title tag in HTML: only display 70 characters, meta descriptions in HTML: have no limitation but only first 155 characters are displayed in Google search results. This character counter software works in any web browsers such as Chrome, Firefox\",\n  \"hexColor\": \"#3D7961\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items",
										":itemId",
										"poll-options"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										},
										{
											"key": "itemId",
											"value": "{{taskItem5O}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Poll answer 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"pollItem2O\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Poll Question 2\",\n  \"hexColor\": \"#C03636\",\n  \"order\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items",
										":itemId",
										"poll-options"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										},
										{
											"key": "itemId",
											"value": "{{taskItem5O}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Poll answer 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"pollItem3O\", response.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Poll QUESTION 3\",\n  \"hexColor\": \"#F6D171\",\n  \"order\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId/items/:itemId/poll-options",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId",
										"items",
										":itemId",
										"poll-options"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										},
										{
											"key": "itemId",
											"value": "{{taskItem5O}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Participants via Ad Hoc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assignees\": {\n        \"userIds\": [\n            \"{{StoreU0}}\",\n            \"{{StoreU1}}\",\n            \"{{StoreU2}}\",\n            \"{{StoreU3}}\",\n            \"{{StoreU4}}\"\n        ]\n    },\n    \"reviewers\": {\n        \"userIds\": [\n            \"{{principalUseradmin2319}}\",\n            \"{{principalUsersaJD}}\"\n        ]\n    },\n    \"observers\": {\n        \"userIds\": [\n            \"{{principalUseradmin2319}}\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskid",
										"participants"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Admin workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"assignees\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"observers\\\"\\:\\{\\\"userIds\\\"\\:\\[\\\"a6bc47ee-2df1-4d3c-a34c-4f010193ad0e\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"query": [
										{
											"key": "items",
											"value": "true"
										},
										{
											"key": "editMode",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Poll Title\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Poll Question 2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"query": [
										{
											"key": "items",
											"value": "true"
										},
										{
											"key": "editMode",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"TASK From Task Template {{$randomCatchPhrase}} {{$isoTimestamp}}\",\n    \"description\": \"All Optional Items {{$randomCatchPhrase}}\",\n    \"schedule\": {\n        \"visibleDate\": null,\n        \"startDate\": null,\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": false\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Review Stats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":5\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":0\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"tasks",
										":taskid",
										"review-stats"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskTemplateId2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Templates",
					"item": [
						{
							"name": "Search Task Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"taskTemplateFAV\", response.taskTemplates[0].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"partialTitle\": \"Private Task Template\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/search",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Task Template \"private\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"isPrivate\\\"\\:true\\,\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"partialTitle\": \"private\",\n  \"limit\": 30,\n  \"offset\": 0,\n  \"includeTotal\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/search",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Task Template User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"taskTemplates\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isPrivate\");",
											"    pm.expect(pm.response.text()).to.include(\"isFavorite\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseruser}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenuser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"partialTitle\": \"private\",\n    \"limit\": 40,\n    \"offset\": 0,\n    \"includeTotal\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/search",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Task Template empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"partialTitle\": \"\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"includeTotal\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/search",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Favourite Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId/favorites",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										":taskTemplateId",
										"favorites"
									],
									"variable": [
										{
											"key": "taskTemplateId",
											"value": "{{taskTemplateFAV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Un-Favourite Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId/favorites",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										":taskTemplateId",
										"favorites"
									],
									"variable": [
										{
											"key": "taskTemplateId",
											"value": "{{taskTemplateFAV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Favourite Template again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId/favorites",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										":taskTemplateId",
										"favorites"
									],
									"variable": [
										{
											"key": "taskTemplateId",
											"value": "{{taskTemplateFAV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task Template SA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"UPDATED TEMPLATE NAME EXE\",\n  \"description\": \"UPDATED TEMPLATE NAME EXE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										":taskTemplateId"
									],
									"variable": [
										{
											"key": "taskTemplateId",
											"value": "{{taskTemplateFAV}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "principal-user",
										"value": "{{principalUseradmin2319}}",
										"type": "text"
									},
									{
										"key": "access-token",
										"value": "{{accessTokenadmin2319}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v1/task-templates/:taskTemplateId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"task-templates",
										":taskTemplateId"
									],
									"variable": [
										{
											"key": "taskTemplateId",
											"value": "{{taskTemplateFAV}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get task Admin added items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"result\\\"\\:null\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "principal-user",
								"value": "{{principalUseradmin2319}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{accessTokenadmin2319}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v1/tasks/:taskId?items=true&editMode=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tasks",
								":taskId"
							],
							"query": [
								{
									"key": "items",
									"value": "true"
								},
								{
									"key": "editMode",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskTemplateId2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Task - Scheduled",
			"item": [
				{
					"name": "1. New Task Copy",
					"item": [
						{
							"name": "Create task add Items",
							"item": [
								{
									"name": "Create Task",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskIdSched\", response.id);",
													"//pm.environment.set(\"taskTitle\", request.title);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 Scheduled {{$isoTimestamp}}\",\n    \"description\": \"Task Test, created as Admin run through e2e {{$randomCatchPhrase}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add task Text Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"order\");",
													"});",
													"",
													"const response = pm.response.json();",
													"pm.environment.set(\"taskItemSched0\", response.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"text\",\n    \"item\": {\n        \"title\": \"Can you work Christman Day ?\",\n        \"order\": 1,\n        \"optional\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId/items",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId",
												"items"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdSched}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Participants via AdHoc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assignees\": {\n        \"userIds\": [\n            \"{{StoreU0}}\",\n            \"{{StoreU1}}\",\n            \"{{StoreU2}}\",\n            \"{{StoreU3}}\",\n            \"{{StoreU4}}\"\n        ]\n    },\n    \"reviewers\": {\n        \"userIds\": [\n            \"{{StoreU0}}\"\n        ]\n    },\n    \"observers\": {\n        \"userIds\": [\n            \"{{StoreU0}}\"\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/participants",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"participants"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdSched}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Publish",
							"item": [
								{
									"name": "Publish Task 6 users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var time = new Date();",
													"time.setHours(time.getHours()+1);",
													"var timeVisible = time.toISOString();",
													"pm.globals.set(\"timeVisible\", timeVisible)",
													"",
													"var time = new Date();",
													"time.setHours(time.getHours()+2);",
													"var timeSched = time.toISOString();",
													"pm.globals.set(\"timeSched\", timeSched)",
													"",
													"var time = new Date();",
													"time.setHours(time.getHours()+3);",
													"var timeDue = time.toISOString();",
													"pm.globals.set(\"timeDue\", timeDue)",
													"",
													"var time = new Date();",
													"time.setHours(time.getHours()+4);",
													"var timeArchive = time.toISOString();",
													"//console.log('24 hours added:' + timeArchive);",
													"pm.globals.set(\"timeArchive\", timeArchive)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"Store 2319 AdHoc Scheduled Visible date {{timeSched}}\",\n    \"description\": \"SCHEDULED & Start & Archive\",\n    \"schedule\": {\n        \"visibleDate\": \"{{timeVisible}}\",\n        \"startDate\": \"{{timeSched}}\",\n        \"dueDate\": \"{{timeDue}}\",\n        \"archiveDate\": \"{{timeArchive}}\",\n        \"enforceDueDate\": true\n    },\n    \"submit\": true,\n    \"discardChanges\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskId",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "{{taskIdSched}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Scheduled tasks Creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"});",
													"",
													"//Get the variable value",
													"var testVar= pm.environment.get(\"taskIdSched\");",
													"//Validate whether entire response value as a text contains the variable value. ",
													"pm.test(\"Validate if response contains variable.\", function () {",
													"     pm.expect(pm.response.text()).to.include(testVar);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/scheduled?limit=20&offset=0&participantRole=creator",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												"scheduled"
											],
											"query": [
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "participantRole",
													"value": "creator"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Review Stats 6 Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"not_started\\\":0\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"in_progress\\\":0\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"completed\\\":0\");",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "principal-user",
												"value": "{{principalUseradmin2319}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{accessTokenadmin2319}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/v1/tasks/:taskid/review-stats",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"v1",
												"tasks",
												":taskid",
												"review-stats"
											],
											"variable": [
												{
													"key": "taskid",
													"value": "{{taskIdSched}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Org Settings",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "principal-user",
						"value": "{{principalUsersa}}",
						"type": "text"
					},
					{
						"key": "access-token",
						"value": "{{accessTokensa}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{workforceudAuthorizationsa}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"taskCreationRestrictionEnabled\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/v17/services/organizations/:organization-id/settings",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"v17",
						"services",
						"organizations",
						":organization-id",
						"settings"
					],
					"variable": [
						{
							"key": "organization-id",
							"value": "{{workforce}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2 Second Delay Copy",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/2",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"2"
					]
				}
			},
			"response": []
		}
	]
}